package org.ucombinator.jade.classfile

import com.github.javaparser.ast.type.ClassOrInterfaceType
import com.github.javaparser.ast.type.Type
import com.github.javaparser.ast.type.TypeParameter
import com.github.javaparser.ast.visitor.GenericVisitorAdapter
import org.junit.jupiter.params.ParameterizedTest
import org.junit.jupiter.params.provider.MethodSource
import org.ucombinator.jade.util.Log

import kotlin.test.assertFailsWith
import kotlin.test.expect

@Suppress("BACKTICKS_PROHIBITED")
object SignatureTest {
  private val log = Log {}

  enum class Kind { TYPE, CLASS, METHOD }

  @Suppress("detekt:MaxLineLength", "ktlint:standard:argument-list-wrapping", "ktlint:standard:max-line-length")
  @JvmStatic fun tests() =
    // Triple(signature kind, signature, expected result or null for invalid)
    listOf<Triple<Kind, String, String?>>(
      // TODO: From ...
      Triple(Kind.TYPE, "", null),
      Triple(Kind.CLASS, "", null),
      Triple(Kind.METHOD, "", null),
      Triple(Kind.TYPE, "L.;", null),
      Triple(Kind.TYPE, "L;;", null),
      Triple(Kind.TYPE, "L[;", null),
      Triple(Kind.TYPE, "L/;", null),
      Triple(Kind.TYPE, "L<;", null),
      Triple(Kind.TYPE, "L>;", null),
      Triple(Kind.TYPE, "L:;", null),
      // TODO: test basic forms

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/hotspot/jtreg/vmTestbase/nsk/jdi/LocalVariable/genericSignature/gensignature001.java
      Triple(Kind.TYPE, "TT;", "T"),
      Triple(Kind.TYPE, "TN;", "N"),
      Triple(Kind.TYPE, "[TT;", "T[]"),
      Triple(Kind.TYPE, "[TN;", "N[]"),
      Triple(Kind.TYPE, "Ljava/util/List<TT;>;", "java.util.List<T>"),
      Triple(Kind.TYPE, "Ljava/util/List<TN;>;", "java.util.List<N>"),
      Triple(Kind.TYPE, "Ljava/util/List<+TT;>;", "java.util.List<? extends T>"),
      Triple(Kind.TYPE, "Ljava/util/List<+TN;>;", "java.util.List<? extends N>"),
      Triple(Kind.TYPE, "TT;", "T"),
      Triple(Kind.TYPE, "TN;", "N"),
      Triple(Kind.TYPE, "[TT;", "T[]"),
      Triple(Kind.TYPE, "[TN;", "N[]"),
      Triple(Kind.TYPE, "Ljava/util/List<TT;>;", "java.util.List<T>"),
      Triple(Kind.TYPE, "Ljava/util/List<TN;>;", "java.util.List<N>"),
      Triple(Kind.TYPE, "Ljava/util/List<+TT;>;", "java.util.List<? extends T>"),
      Triple(Kind.TYPE, "Ljava/util/List<+TN;>;", "java.util.List<? extends N>"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/hotspot/jtreg/vmTestbase/nsk/jdi/ReferenceType/genericSignature/genericSignature001.java
      Triple(Kind.CLASS, "<T:Ljava/lang/Object;>Ljava/lang/Object;", "T extends java.lang.Object;java.lang.Object;"),
      Triple(Kind.CLASS, "<T1:Ljava/lang/Object;T2:Ljava/lang/Object;>Ljava/lang/Object;", "T1 extends java.lang.Object,T2 extends java.lang.Object;java.lang.Object;"),
      Triple(Kind.CLASS, "<T:Lnsk/jdi/ReferenceType/genericSignature/GS001_Class01;>Ljava/lang/Object;", "T extends nsk.jdi.ReferenceType.genericSignature.GS001_Class01;java.lang.Object;"),
      Triple(Kind.CLASS, "<T:Lnsk/jdi/ReferenceType/genericSignature/GS001_Class01;:Lnsk/jdi/ReferenceType/genericSignature/GS001_Interf01;>Ljava/lang/Object;", "T extends nsk.jdi.ReferenceType.genericSignature.GS001_Class01&nsk.jdi.ReferenceType.genericSignature.GS001_Interf01;java.lang.Object;"),
      Triple(Kind.CLASS, "<T1:Lnsk/jdi/ReferenceType/genericSignature/GS001_Class01;:Lnsk/jdi/ReferenceType/genericSignature/GS001_Interf01;T2:Lnsk/jdi/ReferenceType/genericSignature/GS001_Class02;:Lnsk/jdi/ReferenceType/genericSignature/GS001_Interf02;>Ljava/lang/Object;", "T1 extends nsk.jdi.ReferenceType.genericSignature.GS001_Class01&nsk.jdi.ReferenceType.genericSignature.GS001_Interf01,T2 extends nsk.jdi.ReferenceType.genericSignature.GS001_Class02&nsk.jdi.ReferenceType.genericSignature.GS001_Interf02;java.lang.Object;"),
      Triple(Kind.CLASS, "Lnsk/jdi/ReferenceType/genericSignature/GS001_Class06<Lnsk/jdi/ReferenceType/genericSignature/GS001_Class01;>;", ";nsk.jdi.ReferenceType.genericSignature.GS001_Class06<nsk.jdi.ReferenceType.genericSignature.GS001_Class01>;"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/hotspot/jtreg/vmTestbase/nsk/jdi/ReferenceType/genericSignature/genericSignature002.java
      Triple(Kind.CLASS, "<I:Ljava/lang/Object;>Ljava/lang/Object;", "I extends java.lang.Object;java.lang.Object;"),
      Triple(Kind.CLASS, "<I1:Ljava/lang/Object;I2:Ljava/lang/Object;>Ljava/lang/Object;", "I1 extends java.lang.Object,I2 extends java.lang.Object;java.lang.Object;"),
      Triple(Kind.CLASS, "<I::Lnsk/jdi/ReferenceType/genericSignature/GS002_Interf01;>Ljava/lang/Object;", "I extends nsk.jdi.ReferenceType.genericSignature.GS002_Interf01;java.lang.Object;"),
      Triple(Kind.CLASS, "<I:Lnsk/jdi/ReferenceType/genericSignature/GS002_Class00;:Lnsk/jdi/ReferenceType/genericSignature/GS002_Interf02;>Ljava/lang/Object;", "I extends nsk.jdi.ReferenceType.genericSignature.GS002_Class00&nsk.jdi.ReferenceType.genericSignature.GS002_Interf02;java.lang.Object;"),
      Triple(Kind.CLASS, "<I1:Lnsk/jdi/ReferenceType/genericSignature/GS002_Class00;:Lnsk/jdi/ReferenceType/genericSignature/GS002_Interf02;I2::Lnsk/jdi/ReferenceType/genericSignature/GS002_Interf02;>Ljava/lang/Object;", "I1 extends nsk.jdi.ReferenceType.genericSignature.GS002_Class00&nsk.jdi.ReferenceType.genericSignature.GS002_Interf02,I2 extends nsk.jdi.ReferenceType.genericSignature.GS002_Interf02;java.lang.Object;"),
      Triple(Kind.CLASS, "Ljava/lang/Object;Lnsk/jdi/ReferenceType/genericSignature/GS002_Interf03<Lnsk/jdi/ReferenceType/genericSignature/GS002_Class00;>;", ";java.lang.Object;nsk.jdi.ReferenceType.genericSignature.GS002_Interf03<nsk.jdi.ReferenceType.genericSignature.GS002_Class00>"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/hotspot/jtreg/vmTestbase/nsk/jdi/TypeComponent/genericSignature/genericSignature001.java
      Triple(Kind.TYPE, "Lnsk/jdi/TypeComponent/genericSignature/GS001_Class06<Lnsk/jdi/TypeComponent/genericSignature/GS001_Class01;>;", "nsk.jdi.TypeComponent.genericSignature.GS001_Class06<nsk.jdi.TypeComponent.genericSignature.GS001_Class01>"),
      Triple(Kind.TYPE, "Lnsk/jdi/TypeComponent/genericSignature/GS001_Class07<Lnsk/jdi/TypeComponent/genericSignature/GS001_Class01;Lnsk/jdi/TypeComponent/genericSignature/GS001_Class02;>;", "nsk.jdi.TypeComponent.genericSignature.GS001_Class07<nsk.jdi.TypeComponent.genericSignature.GS001_Class01,nsk.jdi.TypeComponent.genericSignature.GS001_Class02>"),
      Triple(Kind.TYPE, "Lnsk/jdi/TypeComponent/genericSignature/GS001_Class08<Lnsk/jdi/TypeComponent/genericSignature/GS001_Class03;>;", "nsk.jdi.TypeComponent.genericSignature.GS001_Class08<nsk.jdi.TypeComponent.genericSignature.GS001_Class03>"),
      Triple(Kind.TYPE, "Lnsk/jdi/TypeComponent/genericSignature/GS001_Class09<Lnsk/jdi/TypeComponent/genericSignature/GS001_Class04;>;", "nsk.jdi.TypeComponent.genericSignature.GS001_Class09<nsk.jdi.TypeComponent.genericSignature.GS001_Class04>"),
      Triple(Kind.TYPE, "Lnsk/jdi/TypeComponent/genericSignature/GS001_Class10<Lnsk/jdi/TypeComponent/genericSignature/GS001_Class04;Lnsk/jdi/TypeComponent/genericSignature/GS001_Class05;>;", "nsk.jdi.TypeComponent.genericSignature.GS001_Class10<nsk.jdi.TypeComponent.genericSignature.GS001_Class04,nsk.jdi.TypeComponent.genericSignature.GS001_Class05>"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/hotspot/jtreg/vmTestbase/nsk/jdi/TypeComponent/genericSignature/genericSignature002.java
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/genericSignature/GS002_Class06<Lnsk/jdi/TypeComponent/genericSignature/GS002_Class01;>;)V", ";nsk.jdi.TypeComponent.genericSignature.GS002_Class06<nsk.jdi.TypeComponent.genericSignature.GS002_Class01>;void;"),
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/genericSignature/GS002_Class06<Lnsk/jdi/TypeComponent/genericSignature/GS002_Class01;>;)Lnsk/jdi/TypeComponent/genericSignature/GS002_Class06<Lnsk/jdi/TypeComponent/genericSignature/GS002_Class01;>;", ";nsk.jdi.TypeComponent.genericSignature.GS002_Class06<nsk.jdi.TypeComponent.genericSignature.GS002_Class01>;nsk.jdi.TypeComponent.genericSignature.GS002_Class06<nsk.jdi.TypeComponent.genericSignature.GS002_Class01>;"),
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/genericSignature/GS002_Class07<Lnsk/jdi/TypeComponent/genericSignature/GS002_Class01;Lnsk/jdi/TypeComponent/genericSignature/GS002_Class02;>;)V", ";nsk.jdi.TypeComponent.genericSignature.GS002_Class07<nsk.jdi.TypeComponent.genericSignature.GS002_Class01,nsk.jdi.TypeComponent.genericSignature.GS002_Class02>;void;"),
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/genericSignature/GS002_Class07<Lnsk/jdi/TypeComponent/genericSignature/GS002_Class01;Lnsk/jdi/TypeComponent/genericSignature/GS002_Class02;>;)Lnsk/jdi/TypeComponent/genericSignature/GS002_Class07<Lnsk/jdi/TypeComponent/genericSignature/GS002_Class01;Lnsk/jdi/TypeComponent/genericSignature/GS002_Class02;>;", ";nsk.jdi.TypeComponent.genericSignature.GS002_Class07<nsk.jdi.TypeComponent.genericSignature.GS002_Class01,nsk.jdi.TypeComponent.genericSignature.GS002_Class02>;nsk.jdi.TypeComponent.genericSignature.GS002_Class07<nsk.jdi.TypeComponent.genericSignature.GS002_Class01,nsk.jdi.TypeComponent.genericSignature.GS002_Class02>;"),
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/genericSignature/GS002_Class08<Lnsk/jdi/TypeComponent/genericSignature/GS002_Class03;>;)V", ";nsk.jdi.TypeComponent.genericSignature.GS002_Class08<nsk.jdi.TypeComponent.genericSignature.GS002_Class03>;void;"),
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/genericSignature/GS002_Class08<Lnsk/jdi/TypeComponent/genericSignature/GS002_Class03;>;)Lnsk/jdi/TypeComponent/genericSignature/GS002_Class08<Lnsk/jdi/TypeComponent/genericSignature/GS002_Class03;>;", ";nsk.jdi.TypeComponent.genericSignature.GS002_Class08<nsk.jdi.TypeComponent.genericSignature.GS002_Class03>;nsk.jdi.TypeComponent.genericSignature.GS002_Class08<nsk.jdi.TypeComponent.genericSignature.GS002_Class03>;"),
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/genericSignature/GS002_Class09<Lnsk/jdi/TypeComponent/genericSignature/GS002_Class04;>;)V", ";nsk.jdi.TypeComponent.genericSignature.GS002_Class09<nsk.jdi.TypeComponent.genericSignature.GS002_Class04>;void;"),
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/genericSignature/GS002_Class09<Lnsk/jdi/TypeComponent/genericSignature/GS002_Class04;>;)Lnsk/jdi/TypeComponent/genericSignature/GS002_Class09<Lnsk/jdi/TypeComponent/genericSignature/GS002_Class04;>;", ";nsk.jdi.TypeComponent.genericSignature.GS002_Class09<nsk.jdi.TypeComponent.genericSignature.GS002_Class04>;nsk.jdi.TypeComponent.genericSignature.GS002_Class09<nsk.jdi.TypeComponent.genericSignature.GS002_Class04>;"),
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/genericSignature/GS002_Class10<Lnsk/jdi/TypeComponent/genericSignature/GS002_Class04;Lnsk/jdi/TypeComponent/genericSignature/GS002_Class05;>;)V", ";nsk.jdi.TypeComponent.genericSignature.GS002_Class10<nsk.jdi.TypeComponent.genericSignature.GS002_Class04,nsk.jdi.TypeComponent.genericSignature.GS002_Class05>;void;"),
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/genericSignature/GS002_Class10<Lnsk/jdi/TypeComponent/genericSignature/GS002_Class04;Lnsk/jdi/TypeComponent/genericSignature/GS002_Class05;>;)Lnsk/jdi/TypeComponent/genericSignature/GS002_Class10<Lnsk/jdi/TypeComponent/genericSignature/GS002_Class04;Lnsk/jdi/TypeComponent/genericSignature/GS002_Class05;>;", ";nsk.jdi.TypeComponent.genericSignature.GS002_Class10<nsk.jdi.TypeComponent.genericSignature.GS002_Class04,nsk.jdi.TypeComponent.genericSignature.GS002_Class05>;nsk.jdi.TypeComponent.genericSignature.GS002_Class10<nsk.jdi.TypeComponent.genericSignature.GS002_Class04,nsk.jdi.TypeComponent.genericSignature.GS002_Class05>;"),
      Triple(Kind.METHOD, "<C:Ljava/lang/Object;>()V", "C extends java.lang.Object;;void;"),
      Triple(Kind.METHOD, "<C:Ljava/lang/Object;>(TC;)V", "C extends java.lang.Object;C;void;"),
      Triple(Kind.METHOD, "<C:Ljava/lang/Object;>(TC;)TC;", "C extends java.lang.Object;C;C;"),
      Triple(Kind.METHOD, "<C1:Ljava/lang/Object;C2:Ljava/lang/Object;>()V", "C1 extends java.lang.Object,C2 extends java.lang.Object;;void;"),
      Triple(Kind.METHOD, "<C1:Ljava/lang/Object;C2:Ljava/lang/Object;>(TC1;TC2;)V", "C1 extends java.lang.Object,C2 extends java.lang.Object;C1,C2;void;"),
      Triple(Kind.METHOD, "<C1:Ljava/lang/Object;C2:Ljava/lang/Object;>(TC1;TC2;)TC2;", "C1 extends java.lang.Object,C2 extends java.lang.Object;C1,C2;C2;"),
      Triple(Kind.METHOD, "<C1:Lnsk/jdi/TypeComponent/genericSignature/GS002_Class01;:Lnsk/jdi/TypeComponent/genericSignature/GS002_Interf01;C2:Lnsk/jdi/TypeComponent/genericSignature/GS002_Class02;:Lnsk/jdi/TypeComponent/genericSignature/GS002_Interf02;>()V", "C1 extends nsk.jdi.TypeComponent.genericSignature.GS002_Class01&nsk.jdi.TypeComponent.genericSignature.GS002_Interf01,C2 extends nsk.jdi.TypeComponent.genericSignature.GS002_Class02&nsk.jdi.TypeComponent.genericSignature.GS002_Interf02;;void;"),
      Triple(Kind.METHOD, "<C1:Lnsk/jdi/TypeComponent/genericSignature/GS002_Class01;:Lnsk/jdi/TypeComponent/genericSignature/GS002_Interf01;C2:Lnsk/jdi/TypeComponent/genericSignature/GS002_Class02;:Lnsk/jdi/TypeComponent/genericSignature/GS002_Interf02;>(TC2;TC1;)V", "C1 extends nsk.jdi.TypeComponent.genericSignature.GS002_Class01&nsk.jdi.TypeComponent.genericSignature.GS002_Interf01,C2 extends nsk.jdi.TypeComponent.genericSignature.GS002_Class02&nsk.jdi.TypeComponent.genericSignature.GS002_Interf02;C2,C1;void;"),
      Triple(Kind.METHOD, "<C1:Lnsk/jdi/TypeComponent/genericSignature/GS002_Class01;:Lnsk/jdi/TypeComponent/genericSignature/GS002_Interf01;C2:Lnsk/jdi/TypeComponent/genericSignature/GS002_Class02;:Lnsk/jdi/TypeComponent/genericSignature/GS002_Interf02;>(TC2;TC1;)TC1;", "C1 extends nsk.jdi.TypeComponent.genericSignature.GS002_Class01&nsk.jdi.TypeComponent.genericSignature.GS002_Interf01,C2 extends nsk.jdi.TypeComponent.genericSignature.GS002_Class02&nsk.jdi.TypeComponent.genericSignature.GS002_Interf02;C2,C1;C1;"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/hotspot/jtreg/vmTestbase/nsk/jdi/TypeComponent/signature/sign001.java
      Triple(Kind.TYPE, "Z", "boolean"),
      Triple(Kind.TYPE, "[Z", "boolean[]"),
      Triple(Kind.TYPE, "[[Z", "boolean[][]"),
      Triple(Kind.TYPE, "B", "byte"),
      Triple(Kind.TYPE, "[B", "byte[]"),
      Triple(Kind.TYPE, "[[B", "byte[][]"),
      Triple(Kind.TYPE, "C", "char"),
      Triple(Kind.TYPE, "[C", "char[]"),
      Triple(Kind.TYPE, "[[C", "char[][]"),
      Triple(Kind.TYPE, "D", "double"),
      Triple(Kind.TYPE, "[D", "double[]"),
      Triple(Kind.TYPE, "[[D", "double[][]"),
      Triple(Kind.TYPE, "F", "float"),
      Triple(Kind.TYPE, "[F", "float[]"),
      Triple(Kind.TYPE, "[[F", "float[][]"),
      Triple(Kind.TYPE, "I", "int"),
      Triple(Kind.TYPE, "[I", "int[]"),
      Triple(Kind.TYPE, "[[I", "int[][]"),
      Triple(Kind.TYPE, "J", "long"),
      Triple(Kind.TYPE, "[J", "long[]"),
      Triple(Kind.TYPE, "[[J", "long[][]"),
      Triple(Kind.TYPE, "S", "short"),
      Triple(Kind.TYPE, "[S", "short[]"),
      Triple(Kind.TYPE, "[[S", "short[][]"),
      Triple(Kind.TYPE, "J", "long"),
      Triple(Kind.TYPE, "[J", "long[]"),
      Triple(Kind.TYPE, "[[J", "long[][]"),
      Triple(Kind.TYPE, "J", "long"),
      Triple(Kind.TYPE, "[J", "long[]"),
      Triple(Kind.TYPE, "[[J", "long[][]"),
      Triple(Kind.TYPE, "J", "long"),
      Triple(Kind.TYPE, "[J", "long[]"),
      Triple(Kind.TYPE, "[[J", "long[][]"),
      Triple(Kind.TYPE, "J", "long"),
      Triple(Kind.TYPE, "[J", "long[]"),
      Triple(Kind.TYPE, "[[J", "long[][]"),
      Triple(Kind.TYPE, "J", "long"),
      Triple(Kind.TYPE, "[J", "long[]"),
      Triple(Kind.TYPE, "[[J", "long[][]"),
      Triple(Kind.TYPE, "J", "long"),
      Triple(Kind.TYPE, "[J", "long[]"),
      Triple(Kind.TYPE, "[[J", "long[][]"),
      Triple(Kind.TYPE, "J", "long"),
      Triple(Kind.TYPE, "[J", "long[]"),
      Triple(Kind.TYPE, "[[J", "long[][]"),
      Triple(Kind.TYPE, "Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Class;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Class"),
      Triple(Kind.TYPE, "[Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Class;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Class[]"),
      Triple(Kind.TYPE, "[[Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Class;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Class[][]"),
      Triple(Kind.TYPE, "Ljava/lang/Object;", "java.lang.Object"),
      Triple(Kind.TYPE, "[Ljava/lang/Object;", "java.lang.Object[]"),
      Triple(Kind.TYPE, "[[Ljava/lang/Object;", "java.lang.Object[][]"),
      Triple(Kind.TYPE, "Ljava/lang/Long;", "java.lang.Long"),
      Triple(Kind.TYPE, "[Ljava/lang/Long;", "java.lang.Long[]"),
      Triple(Kind.TYPE, "[[Ljava/lang/Long;", "java.lang.Long[][]"),
      Triple(Kind.TYPE, "Ljava/lang/Long;", "java.lang.Long"),
      Triple(Kind.TYPE, "[Ljava/lang/Long;", "java.lang.Long[]"),
      Triple(Kind.TYPE, "[[Ljava/lang/Long;", "java.lang.Long[][]"),
      Triple(Kind.TYPE, "Ljava/lang/Long;", "java.lang.Long"),
      Triple(Kind.TYPE, "[Ljava/lang/Long;", "java.lang.Long[]"),
      Triple(Kind.TYPE, "[[Ljava/lang/Long;", "java.lang.Long[][]"),
      Triple(Kind.TYPE, "Ljava/lang/Long;", "java.lang.Long"),
      Triple(Kind.TYPE, "[Ljava/lang/Long;", "java.lang.Long[]"),
      Triple(Kind.TYPE, "[[Ljava/lang/Long;", "java.lang.Long[][]"),
      Triple(Kind.TYPE, "Ljava/lang/Long;", "java.lang.Long"),
      Triple(Kind.TYPE, "[Ljava/lang/Long;", "java.lang.Long[]"),
      Triple(Kind.TYPE, "[[Ljava/lang/Long;", "java.lang.Long[][]"),
      Triple(Kind.TYPE, "Ljava/lang/Long;", "java.lang.Long"),
      Triple(Kind.TYPE, "[Ljava/lang/Long;", "java.lang.Long[]"),
      Triple(Kind.TYPE, "[[Ljava/lang/Long;", "java.lang.Long[][]"),
      Triple(Kind.TYPE, "Ljava/lang/Long;", "java.lang.Long"),
      Triple(Kind.TYPE, "[Ljava/lang/Long;", "java.lang.Long[]"),
      Triple(Kind.TYPE, "[[Ljava/lang/Long;", "java.lang.Long[][]"),
      Triple(Kind.TYPE, "Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter"),
      Triple(Kind.TYPE, "[Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter[]"),
      Triple(Kind.TYPE, "[[Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter[][]"),
      Triple(Kind.TYPE, "Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter"),
      Triple(Kind.TYPE, "[Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter[]"),
      Triple(Kind.TYPE, "[[Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter[][]"),
      Triple(Kind.TYPE, "Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter"),
      Triple(Kind.TYPE, "[Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter[]"),
      Triple(Kind.TYPE, "[[Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter[][]"),
      Triple(Kind.TYPE, "Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter"),
      Triple(Kind.TYPE, "[Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter[]"),
      Triple(Kind.TYPE, "[[Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter[][]"),
      Triple(Kind.TYPE, "Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter"),
      Triple(Kind.TYPE, "[Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter[]"),
      Triple(Kind.TYPE, "[[Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter[][]"),
      Triple(Kind.TYPE, "Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter"),
      Triple(Kind.TYPE, "[Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter[]"),
      Triple(Kind.TYPE, "[[Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter[][]"),
      Triple(Kind.TYPE, "Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter"),
      Triple(Kind.TYPE, "[Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter[]"),
      Triple(Kind.TYPE, "[[Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter[][]"),
      Triple(Kind.TYPE, "Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter"),
      Triple(Kind.TYPE, "[Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter[]"),
      Triple(Kind.TYPE, "[[Lnsk/jdi/TypeComponent/signature/ClassToCheck\$Inter;", "nsk.jdi.TypeComponent.signature.ClassToCheck\$Inter[][]"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/hotspot/jtreg/vmTestbase/nsk/jdi/TypeComponent/signature/sign002.java
      Triple(Kind.METHOD, "()V", ";;void;"),
      Triple(Kind.METHOD, "(Z[[S)Z", ";boolean,short[][];boolean;"),
      Triple(Kind.METHOD, "([ZZ)[Z", ";boolean[],boolean;boolean[];"),
      Triple(Kind.METHOD, "([[Z[Z)[[Z", ";boolean[][],boolean[];boolean[][];"),
      Triple(Kind.METHOD, "(B[[Z)B", ";byte,boolean[][];byte;"),
      Triple(Kind.METHOD, "([BB)[B", ";byte[],byte;byte[];"),
      Triple(Kind.METHOD, "([[B[B)[[B", ";byte[][],byte[];byte[][];"),
      Triple(Kind.METHOD, "(C[[B)C", ";char,byte[][];char;"),
      Triple(Kind.METHOD, "([CC)[C", ";char[],char;char[];"),
      Triple(Kind.METHOD, "([[C[C)[[C", ";char[][],char[];char[][];"),
      Triple(Kind.METHOD, "(D[[C)D", ";double,char[][];double;"),
      Triple(Kind.METHOD, "([DD)[D", ";double[],double;double[];"),
      Triple(Kind.METHOD, "([[D[D)[[D", ";double[][],double[];double[][];"),
      Triple(Kind.METHOD, "(F[[D)F", ";float,double[][];float;"),
      Triple(Kind.METHOD, "([FF)[F", ";float[],float;float[];"),
      Triple(Kind.METHOD, "([[F[F)[[F", ";float[][],float[];float[][];"),
      Triple(Kind.METHOD, "(I[[F)I", ";int,float[][];int;"),
      Triple(Kind.METHOD, "([II)[I", ";int[],int;int[];"),
      Triple(Kind.METHOD, "([[I[I)[[I", ";int[][],int[];int[][];"),
      Triple(Kind.METHOD, "(J[[I)J", ";long,int[][];long;"),
      Triple(Kind.METHOD, "([JJ)[J", ";long[],long;long[];"),
      Triple(Kind.METHOD, "([[J[J)[[J", ";long[][],long[];long[][];"),
      Triple(Kind.METHOD, "(S[[J)S", ";short,long[][];short;"),
      Triple(Kind.METHOD, "([SS)[S", ";short[],short;short[];"),
      Triple(Kind.METHOD, "([[S[S)[[S", ";short[][],short[];short[][];"),
      Triple(Kind.METHOD, "()V", ";;void;"),
      Triple(Kind.METHOD, "(J)J", ";long;long;"),
      Triple(Kind.METHOD, "([J)[J", ";long[];long[];"),
      Triple(Kind.METHOD, "([[J)[[J", ";long[][];long[][];"),
      Triple(Kind.METHOD, "()V", ";;void;"),
      Triple(Kind.METHOD, "(J)J", ";long;long;"),
      Triple(Kind.METHOD, "([J)[J", ";long[];long[];"),
      Triple(Kind.METHOD, "([[J)[[J", ";long[][];long[][];"),
      Triple(Kind.METHOD, "()V", ";;void;"),
      Triple(Kind.METHOD, "(J)J", ";long;long;"),
      Triple(Kind.METHOD, "([J)[J", ";long[];long[];"),
      Triple(Kind.METHOD, "([[J)[[J", ";long[][];long[][];"),
      Triple(Kind.METHOD, "()V", ";;void;"),
      Triple(Kind.METHOD, "(J)J", ";long;long;"),
      Triple(Kind.METHOD, "([J)[J", ";long[];long[];"),
      Triple(Kind.METHOD, "([[J)[[J", ";long[][];long[][];"),
      Triple(Kind.METHOD, "()V", ";;void;"),
      Triple(Kind.METHOD, "(J)J", ";long;long;"),
      Triple(Kind.METHOD, "([J)[J", ";long[];long[];"),
      Triple(Kind.METHOD, "([[J)[[J", ";long[][];long[][];"),
      Triple(Kind.METHOD, "()V", ";;void;"),
      Triple(Kind.METHOD, "(J)J", ";long;long;"),
      Triple(Kind.METHOD, "([J)[J", ";long[];long[];"),
      Triple(Kind.METHOD, "([[J)[[J", ";long[][];long[][];"),
      Triple(Kind.METHOD, "()V", ";;void;"),
      Triple(Kind.METHOD, "(J)J", ";long;long;"),
      Triple(Kind.METHOD, "([J)[J", ";long[];long[];"),
      Triple(Kind.METHOD, "([[J)[[J", ";long[][];long[][];"),
      Triple(Kind.METHOD, "()V", ";;void;"),
      Triple(Kind.METHOD, "(J)J", ";long;long;"),
      Triple(Kind.METHOD, "([J)[J", ";long[];long[];"),
      Triple(Kind.METHOD, "([[J)[[J", ";long[][];long[][];"),
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Class;[[Ljava/lang/Object;)Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Class;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Class,java.lang.Object[][];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Class;"),
      Triple(Kind.METHOD, "([Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Class;Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Class;)[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Class;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Class[],nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Class;nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Class[];"),
      Triple(Kind.METHOD, "([[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Class;[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Class;)[[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Class;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Class[][],nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Class[];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Class[][];"),
      Triple(Kind.METHOD, "(Ljava/lang/Object;[[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Class;)Ljava/lang/Object;", ";java.lang.Object,nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Class[][];java.lang.Object;"),
      Triple(Kind.METHOD, "([Ljava/lang/Object;Ljava/lang/Object;)[Ljava/lang/Object;", ";java.lang.Object[],java.lang.Object;java.lang.Object[];"),
      Triple(Kind.METHOD, "([[Ljava/lang/Object;[Ljava/lang/Object;)[[Ljava/lang/Object;", ";java.lang.Object[][],java.lang.Object[];java.lang.Object[][];"),
      Triple(Kind.METHOD, "(Ljava/lang/Long;)Ljava/lang/Long;", ";java.lang.Long;java.lang.Long;"),
      Triple(Kind.METHOD, "([Ljava/lang/Long;)[Ljava/lang/Long;", ";java.lang.Long[];java.lang.Long[];"),
      Triple(Kind.METHOD, "([[Ljava/lang/Long;)[[Ljava/lang/Long;", ";java.lang.Long[][];java.lang.Long[][];"),
      Triple(Kind.METHOD, "(Ljava/lang/Long;)Ljava/lang/Long;", ";java.lang.Long;java.lang.Long;"),
      Triple(Kind.METHOD, "([Ljava/lang/Long;)[Ljava/lang/Long;", ";java.lang.Long[];java.lang.Long[];"),
      Triple(Kind.METHOD, "([[Ljava/lang/Long;)[[Ljava/lang/Long;", ";java.lang.Long[][];java.lang.Long[][];"),
      Triple(Kind.METHOD, "(Ljava/lang/Long;)Ljava/lang/Long;", ";java.lang.Long;java.lang.Long;"),
      Triple(Kind.METHOD, "([Ljava/lang/Long;)[Ljava/lang/Long;", ";java.lang.Long[];java.lang.Long[];"),
      Triple(Kind.METHOD, "([[Ljava/lang/Long;)[[Ljava/lang/Long;", ";java.lang.Long[][];java.lang.Long[][];"),
      Triple(Kind.METHOD, "(Ljava/lang/Long;)Ljava/lang/Long;", ";java.lang.Long;java.lang.Long;"),
      Triple(Kind.METHOD, "([Ljava/lang/Long;)[Ljava/lang/Long;", ";java.lang.Long[];java.lang.Long[];"),
      Triple(Kind.METHOD, "([[Ljava/lang/Long;)[[Ljava/lang/Long;", ";java.lang.Long[][];java.lang.Long[][];"),
      Triple(Kind.METHOD, "(Ljava/lang/Long;)Ljava/lang/Long;", ";java.lang.Long;java.lang.Long;"),
      Triple(Kind.METHOD, "([Ljava/lang/Long;)[Ljava/lang/Long;", ";java.lang.Long[];java.lang.Long[];"),
      Triple(Kind.METHOD, "([[Ljava/lang/Long;)[[Ljava/lang/Long;", ";java.lang.Long[][];java.lang.Long[][];"),
      Triple(Kind.METHOD, "(Ljava/lang/Long;)Ljava/lang/Long;", ";java.lang.Long;java.lang.Long;"),
      Triple(Kind.METHOD, "([Ljava/lang/Long;)[Ljava/lang/Long;", ";java.lang.Long[];java.lang.Long[];"),
      Triple(Kind.METHOD, "([[Ljava/lang/Long;)[[Ljava/lang/Long;", ";java.lang.Long[][];java.lang.Long[][];"),
      Triple(Kind.METHOD, "(Ljava/lang/Long;)Ljava/lang/Long;", ";java.lang.Long;java.lang.Long;"),
      Triple(Kind.METHOD, "([Ljava/lang/Long;)[Ljava/lang/Long;", ";java.lang.Long[];java.lang.Long[];"),
      Triple(Kind.METHOD, "([[Ljava/lang/Long;)[[Ljava/lang/Long;", ";java.lang.Long[][];java.lang.Long[][];"),
      Triple(Kind.METHOD, "(Ljava/lang/Long;)Ljava/lang/Long;", ";java.lang.Long;java.lang.Long;"),
      Triple(Kind.METHOD, "([Ljava/lang/Long;)[Ljava/lang/Long;", ";java.lang.Long[];java.lang.Long[];"),
      Triple(Kind.METHOD, "([[Ljava/lang/Long;)[[Ljava/lang/Long;", ";java.lang.Long[][];java.lang.Long[][];"),
      Triple(Kind.METHOD, "(IJLnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";int,long,nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter;nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter;"),
      Triple(Kind.METHOD, "([I[Ljava/lang/Long;[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";int[],java.lang.Long[],nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[];"),
      Triple(Kind.METHOD, "([[I[[Ljava/lang/Long;[[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)[[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";int[][],java.lang.Long[][],nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[][];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[][];"),
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter;nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter;"),
      Triple(Kind.METHOD, "([Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[];"),
      Triple(Kind.METHOD, "([[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)[[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[][];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[][];"),
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter;nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter;"),
      Triple(Kind.METHOD, "([Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[];"),
      Triple(Kind.METHOD, "([[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)[[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[][];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[][];"),
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter;nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter;"),
      Triple(Kind.METHOD, "([Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[];"),
      Triple(Kind.METHOD, "([[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)[[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[][];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[][];"),
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter;nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter;"),
      Triple(Kind.METHOD, "([Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[];"),
      Triple(Kind.METHOD, "([[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)[[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[][];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[][];"),
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter;nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter;"),
      Triple(Kind.METHOD, "([Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[];"),
      Triple(Kind.METHOD, "([[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)[[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[][];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[][];"),
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter;nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter;"),
      Triple(Kind.METHOD, "([Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[];"),
      Triple(Kind.METHOD, "([[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)[[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[][];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[][];"),
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter;nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter;"),
      Triple(Kind.METHOD, "([Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[];"),
      Triple(Kind.METHOD, "([[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)[[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[][];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[][];"),
      Triple(Kind.METHOD, "(Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter;nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter;"),
      Triple(Kind.METHOD, "([Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[];"),
      Triple(Kind.METHOD, "([[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;)[[Lnsk/jdi/TypeComponent/signature/sign002aClassToCheck\$Inter;", ";nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[][];nsk.jdi.TypeComponent.signature.sign002aClassToCheck\$Inter[][];"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/hotspot/jtreg/vmTestbase/nsk/jdi/TypeComponent/signature/sign003.java
      Triple(Kind.METHOD, "()V", ";;void;"),
      Triple(Kind.METHOD, "(ID)V", ";int,double;void;"),
      Triple(Kind.METHOD, "([I[D)V", ";int[],double[];void;"),
      Triple(Kind.METHOD, "([[I[[D)V", ";int[][],double[][];void;"),
      Triple(Kind.METHOD, "(Ljava/lang/Long;Ljava/lang/String;Ljava/lang/Object;)V", ";java.lang.Long,java.lang.String,java.lang.Object;void;"),
      Triple(Kind.METHOD, "([Ljava/lang/Long;[Ljava/lang/String;[Ljava/lang/Object;)V", ";java.lang.Long[],java.lang.String[],java.lang.Object[];void;"),
      Triple(Kind.METHOD, "([[Ljava/lang/Long;[[Ljava/lang/String;[[Ljava/lang/Object;)V", ";java.lang.Long[][],java.lang.String[][],java.lang.Object[][];void;"),
      Triple(Kind.METHOD, "(J)V", ";long;void;"),
      Triple(Kind.METHOD, "(Ljava/lang/Object;)V", ";java.lang.Object;void;"),
      Triple(Kind.METHOD, "([J)V", ";long[];void;"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/hotspot/jtreg/vmTestbase/nsk/jdwp/ReferenceType/SignatureWithGeneric/sigwithgeneric001.java
      Triple(Kind.CLASS, "<L:Ljava/lang/String;>Ljava/lang/Object;", "L extends java.lang.String;java.lang.Object;"),
      Triple(Kind.CLASS, "<A:Ljava/lang/Object;B:Ljava/lang/Integer;>Ljava/lang/Object;", "A extends java.lang.Object,B extends java.lang.Integer;java.lang.Object;"),
      Triple(Kind.CLASS, "<T:Ljava/lang/Object;>Ljava/lang/Object;Lnsk/jdwp/ReferenceType/SignatureWithGeneric/sigwithgeneric001if<TT;>;", "T extends java.lang.Object;java.lang.Object;nsk.jdwp.ReferenceType.SignatureWithGeneric.sigwithgeneric001if<T>"),
      Triple(Kind.CLASS, "<I:Ljava/lang/Object;>Ljava/lang/Object;", "I extends java.lang.Object;java.lang.Object;"),
      Triple(Kind.CLASS, "<E:Lnsk/jdwp/ReferenceType/SignatureWithGeneric/sigwithgeneric001e;:Lnsk/jdwp/ReferenceType/SignatureWithGeneric/sigwithgeneric001if;>Ljava/lang/Object;", "E extends nsk.jdwp.ReferenceType.SignatureWithGeneric.sigwithgeneric001e&nsk.jdwp.ReferenceType.SignatureWithGeneric.sigwithgeneric001if;java.lang.Object;"),
      Triple(Kind.CLASS, "<A1:Ljava/lang/Object;B1:Ljava/lang/Object;C1:Ljava/lang/Object;>Lnsk/jdwp/ReferenceType/SignatureWithGeneric/sigwithgeneric001d<TA1;>;Lnsk/jdwp/ReferenceType/SignatureWithGeneric/sigwithgeneric001if2<TA1;TB1;TC1;>;", "A1 extends java.lang.Object,B1 extends java.lang.Object,C1 extends java.lang.Object;nsk.jdwp.ReferenceType.SignatureWithGeneric.sigwithgeneric001d<A1>;nsk.jdwp.ReferenceType.SignatureWithGeneric.sigwithgeneric001if2<A1,B1,C1>"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/hotspot/jtreg/vmTestbase/nsk/jvmti/GetMethodName/methname003/methname003.cpp
      Triple(Kind.METHOD, "(Lnsk/jvmti/GetMethodName/methname003b;)Lnsk/jvmti/GetMethodName/methname003b;", ";nsk.jvmti.GetMethodName.methname003b;nsk.jvmti.GetMethodName.methname003b;"),
      Triple(Kind.METHOD, "<L:Ljava/lang/String;>(Lnsk/jvmti/GetMethodName/methname003b<TL;>;)Lnsk/jvmti/GetMethodName/methname003b<Ljava/lang/String;>;", "L extends java.lang.String;nsk.jvmti.GetMethodName.methname003b<L>;nsk.jvmti.GetMethodName.methname003b<java.lang.String>;"),
      Triple(Kind.METHOD, "(Lnsk/jvmti/GetMethodName/methname003b;)Lnsk/jvmti/GetMethodName/methname003b;", ";nsk.jvmti.GetMethodName.methname003b;nsk.jvmti.GetMethodName.methname003b;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/String;>(Lnsk/jvmti/GetMethodName/methname003b<TT;>;)Lnsk/jvmti/GetMethodName/methname003b<Ljava/lang/String;>;", "T extends java.lang.String;nsk.jvmti.GetMethodName.methname003b<T>;nsk.jvmti.GetMethodName.methname003b<java.lang.String>;"),
      Triple(Kind.METHOD, "(Ljava/lang/Class;)Ljava/lang/Object;", ";java.lang.Class;java.lang.Object;"),
      Triple(Kind.METHOD, "<U:Ljava/lang/Object;>(Ljava/lang/Class<TU;>;)TU;", "U extends java.lang.Object;java.lang.Class<U>;U;"),
      Triple(Kind.METHOD, "(Ljava/lang/Class;)Ljava/lang/Object;", ";java.lang.Class;java.lang.Object;"),
      Triple(Kind.METHOD, "<U:Ljava/lang/Object;>(Ljava/lang/Class<TU;>;)TU;", "U extends java.lang.Object;java.lang.Class<U>;U;"),
      Triple(Kind.METHOD, "(Lnsk/jvmti/GetMethodName/methname003e;)V", ";nsk.jvmti.GetMethodName.methname003e;void;"),
      Triple(Kind.METHOD, "(Lnsk/jvmti/GetMethodName/methname003e;)V", ";nsk.jvmti.GetMethodName.methname003e;void;"),
      Triple(Kind.METHOD, "()I", ";;int;"),
      Triple(Kind.METHOD, "(Ljava/lang/Object;)I", ";java.lang.Object;int;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)I", "T extends java.lang.Object;T;int;"),
      Triple(Kind.METHOD, "(Ljava/lang/Byte;Ljava/lang/Double;[Ljava/lang/Class;)V", ";java.lang.Byte,java.lang.Double,java.lang.Class[];void;"),
      Triple(Kind.METHOD, "<A:Ljava/lang/Byte;B:Ljava/lang/Double;>(TA;TB;[Ljava/lang/Class<*>;)V", "A extends java.lang.Byte,B extends java.lang.Double;A,B,java.lang.Class<?>[];void;"),
      Triple(Kind.METHOD, "(Ljava/lang/Byte;Ljava/lang/Double;)V", ";java.lang.Byte,java.lang.Double;void;"),
      Triple(Kind.METHOD, "<A:Ljava/lang/Byte;B:Ljava/lang/Double;>(TA;TB;)V", "A extends java.lang.Byte,B extends java.lang.Double;A,B;void;"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/jdk/java/lang/reflect/Generics/TestBadSignatures.java
      Triple(Kind.CLASS, "<T:Lfoo/tools/nsc/symtab/Names;Lfoo/tools/nsc/symtab/Symbols;", null),
      Triple(Kind.METHOD, "<E:Ljava/lang/Exception;>(TE;[Ljava/lang/RuntimeException;)V^[TE;", null),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/jdk/jdk/jfr/event/io/TestInstrumentation.java
      Triple(Kind.METHOD, "(J)V", ";long;void;"),
      Triple(Kind.METHOD, "()I", ";;int;"),
      Triple(Kind.METHOD, "([B)I", ";byte[];int;"),
      Triple(Kind.METHOD, "([B)V", ";byte[];void;"),
      Triple(Kind.METHOD, "(I)V", ";int;void;"),
      Triple(Kind.METHOD, "()V", ";;void;"),
      Triple(Kind.METHOD, "([BII)I", ";byte[],int,int;int;"),
      Triple(Kind.METHOD, "([B)I", ";byte[];int;"),
      Triple(Kind.METHOD, "()I", ";;int;"),
      Triple(Kind.METHOD, "(I)V", ";int;void;"),
      Triple(Kind.METHOD, "([B)V", ";byte[];void;"),
      Triple(Kind.METHOD, "([BII)V", ";byte[],int,int;void;"),
      Triple(Kind.METHOD, "()I", ";;int;"),
      Triple(Kind.METHOD, "([BII)I", ";byte[],int,int;int;"),
      Triple(Kind.METHOD, "()V", ";;void;"),
      Triple(Kind.METHOD, "(I)V", ";int;void;"),
      Triple(Kind.METHOD, "([BII)V", ";byte[],int,int;void;"),
      Triple(Kind.METHOD, "()V", ";;void;"),
      Triple(Kind.METHOD, "([Ljava/nio/ByteBuffer;)J", ";java.nio.ByteBuffer[];long;"),
      Triple(Kind.METHOD, "([Ljava/nio/ByteBuffer;)J", ";java.nio.ByteBuffer[];long;"),
      Triple(Kind.METHOD, "()Ljava/nio/channels/SocketChannel;", ";;java.nio.channels.SocketChannel;"),
      Triple(Kind.METHOD, "(Ljava/net/SocketAddress;)Ljava/nio/channels/SocketChannel;", ";java.net.SocketAddress;java.nio.channels.SocketChannel;"),
      Triple(Kind.METHOD, "([Ljava/nio/ByteBuffer;)J", ";java.nio.ByteBuffer[];long;"),
      Triple(Kind.METHOD, "([Ljava/nio/ByteBuffer;)J", ";java.nio.ByteBuffer[];long;"),
      Triple(Kind.METHOD, "(Ljava/nio/ByteBuffer;)I", ";java.nio.ByteBuffer;int;"),
      Triple(Kind.METHOD, "(Ljava/nio/ByteBuffer;)I", ";java.nio.ByteBuffer;int;"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/jdk/jdk/classfile/SignaturesTest.java
      Triple(Kind.CLASS, "Ljava/util/LinkedHashMap<TK;TV;>.LinkedHashIterator;Ljava/util/Iterator<Ljava/util/Map\$Entry<TK;TV;>;>;", ";java.util.LinkedHashMap<K,V>.LinkedHashIterator;java.util.Iterator<java.util.Map\$Entry<K,V>>"),
      Triple(Kind.CLASS, "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/util/AbstractMap<TK;TV;>;Ljava/util/concurrent/ConcurrentMap<TK;TV;>;Ljava/io/Serializable;", "K extends java.lang.Object,V extends java.lang.Object;java.util.AbstractMap<K,V>;java.util.concurrent.ConcurrentMap<K,V>,java.io.Serializable"),
      Triple(Kind.METHOD, "([BLjdk/internal/reflect/ConstantPool;Ljava/lang/Class<*>;[Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;)Ljava/util/Map<Ljava/lang/Class<+Ljava/lang/annotation/Annotation;>;Ljava/lang/annotation/Annotation;>;", ";byte[],jdk.internal.reflect.ConstantPool,java.lang.Class<?>,java.lang.Class<? extends java.lang.annotation.Annotation>[];java.util.Map<java.lang.Class<? extends java.lang.annotation.Annotation>,java.lang.annotation.Annotation>;"),
      Triple(Kind.METHOD, "<T::Ljava/lang/annotation/Annotation;>(Ljava/lang/Class<TT;>;)[TT;^Ljava/lang/IOException;^Ljava/lang/IllegalAccessError;", "T extends java.lang.annotation.Annotation;java.lang.Class<T>;T[];java.lang.IOException,java.lang.IllegalAccessError"),
      Triple(Kind.TYPE, "Ljava/util/Set<+Ljava/nio/file/WatchEvent\$Kind<*>;>;", "java.util.Set<? extends java.nio.file.WatchEvent\$Kind<?>>"),
      Triple(Kind.TYPE, "[[TE;", "E[][]"),
      Triple(Kind.TYPE, "LObject", null),
      Triple(Kind.TYPE, "LObject;B", null),
      Triple(Kind.TYPE, "LIterable<LFoo>", null),
      Triple(Kind.TYPE, "LIterable<<", null),
      Triple(Kind.TYPE, "TBar", null),
      Triple(Kind.TYPE, "TBar<LFoo;>", null),
      Triple(Kind.TYPE, "B<LFoo;>", null),
      Triple(Kind.TYPE, "B<LFoo;>;V", null),
      Triple(Kind.TYPE, "X", null),
      Triple(Kind.TYPE, "[LObject", null),
      Triple(Kind.TYPE, "[LIterable<LFoo>", null),
      Triple(Kind.TYPE, "[LIterable<<", null),
      Triple(Kind.TYPE, "[TBar", null),
      Triple(Kind.TYPE, "[TBar<LFoo;>", null),
      Triple(Kind.TYPE, "[B<LFoo;>", null),
      Triple(Kind.TYPE, "[X", null),
      Triple(Kind.TYPE, "LSet<+Kind<**>;>;", null),
      Triple(Kind.TYPE, "LSet<?Kind<*>;>;", null),
      Triple(Kind.TYPE, "()V", null),
      Triple(Kind.TYPE, "Ljava/util/Opt<Ljava/lang/Integer;>ional;", null),
      Triple(Kind.TYPE, "Lcom/example/Outer<Ljava/lang/String;>.package/Inner<[I>;", null),
      Triple(Kind.TYPE, "LSample>;", null),
      Triple(Kind.TYPE, "LSample:Other;", null),
      Triple(Kind.TYPE, "LOuter<[JTT;>.[Inner;", null),
      Triple(Kind.TYPE, "TA:J;", null),
      Triple(Kind.TYPE, "LEmpty<>;", null),
      Triple(Kind.TYPE, "L", null),
      Triple(Kind.TYPE, "Lcom", null),
      Triple(Kind.TYPE, "Lcom/example/", null),
      Triple(Kind.TYPE, "Lcom/example/Outer<", null),
      Triple(Kind.TYPE, "Lcom/example/Outer<Ljava/", null),
      Triple(Kind.TYPE, "Lcom/example/Outer<Ljava/lang/String", null),
      Triple(Kind.TYPE, "Lcom/example/Outer<Ljava/lang/String;", null),
      Triple(Kind.TYPE, "Lcom/example/Outer<Ljava/lang/String;>", null),
      Triple(Kind.TYPE, "Lcom/example/Outer<Ljava/lang/String;>.", null),
      Triple(Kind.TYPE, "Lcom/example/Outer<Ljava/lang/String;>.Inner<[I>", null),
      Triple(Kind.TYPE, "Ljava/util/Optional<Ljava/lang/Integer;>;", "java.util.Optional<java.lang.Integer>"),
      Triple(Kind.TYPE, "Lcom/example/Outer<Ljava/lang/Integer;>.Inner<[I>;", "com.example.Outer<java.lang.Integer>.Inner<int[]>"),
      Triple(Kind.TYPE, "LSample;", "Sample"),
      Triple(Kind.TYPE, "LOuter<[JTT;>.Inner;", "Outer<long[],T>.Inner"),
      Triple(Kind.TYPE, "LOuter.Inner;", "Outer.Inner"),
      Triple(Kind.CLASS, "Ljava/lang/Object;Ljava/lang/Iterable<LFoo;>", null),
      Triple(Kind.CLASS, "LObject", null),
      Triple(Kind.CLASS, "LObject;B", null),
      Triple(Kind.CLASS, "LIterable<LFoo>", null),
      Triple(Kind.CLASS, "LIterable<<", null),
      Triple(Kind.CLASS, "TBar", null),
      Triple(Kind.CLASS, "TBar<LFoo;>", null),
      Triple(Kind.CLASS, "B<LFoo;>", null),
      Triple(Kind.CLASS, "B<LFoo;>;V", null),
      Triple(Kind.CLASS, "X", null),
      Triple(Kind.CLASS, "LFoo<TK;>.It;L", null),
      Triple(Kind.CLASS, "<K+LObject;>LFoo<TK;;>;LFoo<TK;>;LBar;", null),
      Triple(Kind.CLASS, "<K:LObject;>>LFoo<TK;>;", null),
      Triple(Kind.CLASS, "<K:LObject;>LFoo<+>;", null),
      Triple(Kind.CLASS, "()V", null),
      Triple(Kind.CLASS, "<K:Ljava/lang/Object;>Ljava/lang/Object;TK;", null),
      Triple(Kind.CLASS, "Ljava/lang/Object;[Ljava/lang/Object;", null),
      Triple(Kind.CLASS, "[Ljava/util/Optional<[I>;", null),
      Triple(Kind.CLASS, "[I", null),
      Triple(Kind.CLASS, "<K:Ljava/lang/Object;>TK;", null),
      Triple(Kind.CLASS, "<K;Q:Ljava/lang/Object;>Ljava/lang/Object;", null),
      Triple(Kind.CLASS, "<:Ljava/lang/Object;>Ljava/lang/Object;", null),
      Triple(Kind.CLASS, "<>Ljava/lang/Object;", null),
      Triple(Kind.METHOD, "LObject;", null),
      Triple(Kind.METHOD, "B", null),
      Triple(Kind.METHOD, "()V^", null),
      Triple(Kind.METHOD, "()V^B", null),
      Triple(Kind.METHOD, "()V^X", null),
      Triple(Kind.METHOD, "(LObject;)", null),
      Triple(Kind.METHOD, "(LObject)V", null),
      Triple(Kind.METHOD, "()LIterable<LFoo>", null),
      Triple(Kind.METHOD, "()LIterable<<", null),
      Triple(Kind.METHOD, "()TBar", null),
      Triple(Kind.METHOD, "()TBar;B", null),
      Triple(Kind.METHOD, "(TBar<LFoo;>)V", null),
      Triple(Kind.METHOD, "(B<LFoo;>)V", null),
      Triple(Kind.METHOD, "(X)", null),
      Triple(Kind.METHOD, "()X", null),
      Triple(Kind.METHOD, "()VB", null),
      Triple(Kind.METHOD, "()LSet<+Kind<**>;>;", null),
      Triple(Kind.METHOD, "(LSet<?Kind<*>;>;)V", null),
      Triple(Kind.METHOD, "<T::LA>()V", null),
      Triple(Kind.METHOD, "(TT;I)VI", null),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/jdk/tools/jlink/plugins/SignatureParserTest.java
      Triple(Kind.TYPE, "[Ljava/lang/String;", "java.lang.String[]"),
      Triple(Kind.TYPE, "[[[[[[[[[[Ljava/lang/String;", "java.lang.String[][][][][][][][][][]"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;:Ljava/lang/Comparable<-TT;>;>(Ljava/lang/String;Ljava/lang/Class<TT;>;TT;Ljava/lang/Comparable<-TT;>;Ljava/lang/Comparable<-TT;>;ZZ)V", "T extends java.lang.Object&java.lang.Comparable<? super T>;java.lang.String,java.lang.Class<T>,T,java.lang.Comparable<? super T>,java.lang.Comparable<? super T>,boolean,boolean;void;"),
      Triple(Kind.METHOD, "(Ljava/lang/String;ZLjava/util/EventListener;TTK;)V", ";java.lang.String,boolean,java.util.EventListener,TK;void;"),
      Triple(Kind.CLASS, "<Y:Ljava/lang/String;>LO;", "Y extends java.lang.String;O;"), // appended "LO;" to make valid
      Triple(Kind.CLASS, "<Y:Ljava/lang/String;Z::Ljava/util/EventListener;>LO;", "Y extends java.lang.String,Z extends java.util.EventListener;O;"), // appended "LO;" to make valid
      Triple(Kind.CLASS, "<Y:Ljava/lang/String;Z::Ljava/util/EventListener;O::Ljava/lang/Comparable<Ljava/lang/String;>;>LO;", "Y extends java.lang.String,Z extends java.util.EventListener,O extends java.lang.Comparable<java.lang.String>;O;"), // appended "LO;" to make valid
      Triple(Kind.CLASS, "<Y:Ljava/lang/String;O::Ljava/lang/Comparable<Ljava/lang/String;Ljava/lang/Float;>;>LO;", "Y extends java.lang.String,O extends java.lang.Comparable<java.lang.String,java.lang.Float>;O;"), // appended "LO;" to make valid
      Triple(Kind.CLASS, "<Y:Ljava/lang/String;O::Ljava/lang/Comparable<Ljava/lang/String;Ljava/lang/Float<Ljava/lang/Object;>;>;>LO;", "Y extends java.lang.String,O extends java.lang.Comparable<java.lang.String,java.lang.Float<java.lang.Object>>;O;"), // appended "LO;" to make valid
      Triple(Kind.TYPE, "Ljava/util/Set;", "java.util.Set"),
      Triple(Kind.TYPE, "Ljavaapplication20/Titi<[Ljava/lang/String;Ljava/lang/Integer;>;", "javaapplication20.Titi<java.lang.String[],java.lang.Integer>"),
      Triple(Kind.TYPE, "Ljava/lang/Comparable<TK;>;", "java.lang.Comparable<K>"),
      Triple(Kind.CLASS, "Ljava/io/Serializable;Ljava/lang/Comparable<TK;>;", ";java.io.Serializable;java.lang.Comparable<K>"),
      Triple(Kind.CLASS, "<Y:Ljava/lang/String;Z::Ljava/util/EventListener;K::Ljava/util/EventListener;O::Ljava/lang/Comparable<Ljava/lang/String;>;>Ljavaapplication20/Titi<[Ljava/lang/String;Ljava/lang/Integer;TZ;>;Ljava/io/Serializable;Ljava/lang/Comparable<TK;>;", "Y extends java.lang.String,Z extends java.util.EventListener,K extends java.util.EventListener,O extends java.lang.Comparable<java.lang.String>;javaapplication20.Titi<java.lang.String[],java.lang.Integer,Z>;java.io.Serializable,java.lang.Comparable<K>"),
      Triple(Kind.METHOD, "<PO:Ljava/lang/Object;>(Ljava/lang/Integer;TPO;)Ljava/lang/Integer;", "PO extends java.lang.Object;java.lang.Integer,PO;java.lang.Integer;"),
      Triple(Kind.METHOD, "<PO:Ljava/lang/Object;>(Ljava/lang/Integer;TPO;)TPO;", "PO extends java.lang.Object;java.lang.Integer,PO;PO;"),
      Triple(Kind.METHOD, "<T::Ljava/util/EventListener;>(Ljava/lang/Class<TT;>;)[TT;", "T extends java.util.EventListener;java.lang.Class<T>;T[];"),
      Triple(Kind.METHOD, "<PO:LTiti;>(Ljava/lang/Integer;ITPO;)Z", "PO extends Titi;java.lang.Integer,int,PO;boolean;"),
      Triple(Kind.CLASS, "<K:Ljava/lang/Object;V:Ljava/lang/Object;>Ljava/lang/Object;", "K extends java.lang.Object,V extends java.lang.Object;java.lang.Object;"),
      Triple(Kind.CLASS, "Ljava/util/LinkedHashMap<TK;TV;>.LinkedHashIterator;Ljava/util/Iterator<TV;>;", ";java.util.LinkedHashMap<K,V>.LinkedHashIterator;java.util.Iterator<V>"),
      Triple(Kind.TYPE, "LToto<Ljava/lang/String;>;", "Toto<java.lang.String>"),
      Triple(Kind.TYPE, "Ljavaapplication20/Titi<[Ljava/lang/String;Ljava/lang/Integer<LToto;>;TZ;>;", "javaapplication20.Titi<java.lang.String[],java.lang.Integer<Toto>,Z>"),
      Triple(Kind.TYPE, "LX<[LQ;LW<LToto;>;TZ;>;", "X<Q[],W<Toto>,Z>"),
      Triple(Kind.TYPE, "Ljava/lang/String<*>;", "java.lang.String<?>"),
      Triple(Kind.TYPE, "Ljava/util/List<[B>;", "java.util.List<byte[]>"),
      Triple(Kind.CLASS, "<T:Ljava/lang/Object;T_NODE::Ljava/util/stream/Node<TT;>;>Ljava/lang/Object;Ljava/util/stream/Node<TT;>;", "T extends java.lang.Object,T_NODE extends java.util.stream.Node<T>;java.lang.Object;java.util.stream.Node<T>"),
      Triple(Kind.TYPE, "Ljavaapplication20/Titi<[Ljava/lang/String;>;", "javaapplication20.Titi<java.lang.String[]>"),
      Triple(Kind.CLASS, "<A::Ljava/lang/annotation/Annotation;W::Lcom/sun/codemodel/internal/JAnnotationWriter<TA;>;>Ljava/lang/Object;Ljava/lang/reflect/InvocationHandler;Lcom/sun/codemodel/internal/JAnnotationWriter<TA;>;", "A extends java.lang.annotation.Annotation,W extends com.sun.codemodel.internal.JAnnotationWriter<A>;java.lang.Object;java.lang.reflect.InvocationHandler,com.sun.codemodel.internal.JAnnotationWriter<A>"),
      Triple(Kind.METHOD, "<W::Lcom/sun/codemodel/internal/JAnnotationWriter<*>;>(Ljava/lang/Class<TW;>;Lcom/sun/codemodel/internal/JAnnotatable;)TW;", "W extends com.sun.codemodel.internal.JAnnotationWriter<?>;java.lang.Class<W>,com.sun.codemodel.internal.JAnnotatable;W;"),
      Triple(Kind.TYPE, "Ljava/util/Set<Lcom/sun/tools/jdeps/JdepsTask\$DotGraph<TT;>.Edge;>;", "java.util.Set<com.sun.tools.jdeps.JdepsTask\$DotGraph<T>.Edge>"),
      Triple(Kind.CLASS, "<E::Lcom/sun/xml/internal/rngom/ast/om/ParsedElementAnnotation;L::Lcom/sun/xml/internal/rngom/ast/om/Location;CL::Lcom/sun/xml/internal/rngom/ast/builder/CommentList<TL;>;>Ljava/lang/Object;", "E extends com.sun.xml.internal.rngom.ast.om.ParsedElementAnnotation,L extends com.sun.xml.internal.rngom.ast.om.Location,CL extends com.sun.xml.internal.rngom.ast.builder.CommentList<L>;java.lang.Object;"),
      Triple(Kind.METHOD, "(Ljava/util/List<Lcom/sun/xml/internal/rngom/nc/NameClass;>;TL;TA;)Lcom/sun/xml/internal/rngom/nc/NameClass;", ";java.util.List<com.sun.xml.internal.rngom.nc.NameClass>,L,A;com.sun.xml.internal.rngom.nc.NameClass;"),
      Triple(Kind.TYPE, "[Ljava/util/List;", "java.util.List[]"),
      Triple(Kind.TYPE, "[Ljava/util/List<+Lcom/sun/jdi/request/EventRequest;>;", "java.util.List<? extends com.sun.jdi.request.EventRequest>[]"),
      Triple(Kind.TYPE, "Lcom/sun/xml/internal/bind/v2/util/QNameMap<TV;>.HashIterator<Lcom/sun/xml/internal/bind/v2/util/QNameMap\$Entry<TV;>;>;", "com.sun.xml.internal.bind.v2.util.QNameMap<V>.HashIterator<com.sun.xml.internal.bind.v2.util.QNameMap\$Entry<V>>"),
      Triple(Kind.TYPE, "[Ljava/lang/String;", "java.lang.String[]"),
      Triple(Kind.TYPE, "[Ljava/lang/String<Ljava/lang/Toto<Ljava/lang/Titi;>;>;", "java.lang.String<java.lang.Toto<java.lang.Titi>>[]"),
      Triple(Kind.METHOD, "<T::Ljava/util/EventListener;K:Ljava/util/BOO;>(ZCLjava/lang/Class<TT;>;IJS)[TT;", "T extends java.util.EventListener,K extends java.util.BOO;boolean,char,java.lang.Class<T>,int,long,short;T[];"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;ILjava/lang/Long;)TT;", "T extends java.lang.Object;T,int,java.lang.Long;T;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;ILjava/lang/Long;)TT;^TT;", "T extends java.lang.Object;T,int,java.lang.Long;T;T"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;ILjava/lang/Long;)TT;^TT;^Ljava/lang/Exception;", "T extends java.lang.Object;T,int,java.lang.Long;T;T,java.lang.Exception"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/langtools/tools/javac/StringConcat/WellKnownTypeSignatures.java
      Triple(Kind.METHOD, "(Ljava/lang/String;)Ljava/lang/String;", ";java.lang.String;java.lang.String;"),
      Triple(Kind.METHOD, "(Ljava/lang/Boolean;)Ljava/lang/String;", ";java.lang.Boolean;java.lang.String;"),
      Triple(Kind.METHOD, "(Ljava/lang/Character;)Ljava/lang/String;", ";java.lang.Character;java.lang.String;"),
      Triple(Kind.METHOD, "(Ljava/lang/Byte;)Ljava/lang/String;", ";java.lang.Byte;java.lang.String;"),
      Triple(Kind.METHOD, "(Ljava/lang/Short;)Ljava/lang/String;", ";java.lang.Short;java.lang.String;"),
      Triple(Kind.METHOD, "(Ljava/lang/Integer;)Ljava/lang/String;", ";java.lang.Integer;java.lang.String;"),
      Triple(Kind.METHOD, "(Ljava/lang/Long;)Ljava/lang/String;", ";java.lang.Long;java.lang.String;"),
      Triple(Kind.METHOD, "(Ljava/lang/Double;)Ljava/lang/String;", ";java.lang.Double;java.lang.String;"),
      Triple(Kind.METHOD, "(Ljava/lang/Float;)Ljava/lang/String;", ";java.lang.Float;java.lang.String;"),
      Triple(Kind.METHOD, "(Z)Ljava/lang/String;", ";boolean;java.lang.String;"),
      Triple(Kind.METHOD, "(C)Ljava/lang/String;", ";char;java.lang.String;"),
      Triple(Kind.METHOD, "(B)Ljava/lang/String;", ";byte;java.lang.String;"),
      Triple(Kind.METHOD, "(S)Ljava/lang/String;", ";short;java.lang.String;"),
      Triple(Kind.METHOD, "(I)Ljava/lang/String;", ";int;java.lang.String;"),
      Triple(Kind.METHOD, "(J)Ljava/lang/String;", ";long;java.lang.String;"),
      Triple(Kind.METHOD, "(D)Ljava/lang/String;", ";double;java.lang.String;"),
      Triple(Kind.METHOD, "(F)Ljava/lang/String;", ";float;java.lang.String;"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/langtools/tools/javac/classfiles/attributes/Signature/ConstructorTest.java
      Triple(Kind.CLASS, "<T:Ljava/lang/Object;>Ljava/lang/Object;", "T extends java.lang.Object;java.lang.Object;"),
      Triple(Kind.METHOD, "(TT;Z)V", ";T,boolean;void;"),
      Triple(Kind.METHOD, "(TT;B)V", ";T,byte;void;"),
      Triple(Kind.METHOD, "(TT;C)V", ";T,char;void;"),
      Triple(Kind.METHOD, "(TT;S)V", ";T,short;void;"),
      Triple(Kind.METHOD, "(TT;I)V", ";T,int;void;"),
      Triple(Kind.METHOD, "(TT;J)V", ";T,long;void;"),
      Triple(Kind.METHOD, "(TT;F)V", ";T,float;void;"),
      Triple(Kind.METHOD, "(TT;D)V", ";T,double;void;"),
      Triple(Kind.METHOD, "(TT;Ljava/lang/Runnable;)V", ";T,java.lang.Runnable;void;"),
      Triple(Kind.METHOD, "(TT;[Z)V", ";T,boolean[];void;"),
      Triple(Kind.METHOD, "(TT;[B)V", ";T,byte[];void;"),
      Triple(Kind.METHOD, "(TT;[C)V", ";T,char[];void;"),
      Triple(Kind.METHOD, "(TT;[S)V", ";T,short[];void;"),
      Triple(Kind.METHOD, "(TT;[I)V", ";T,int[];void;"),
      Triple(Kind.METHOD, "(TT;[J)V", ";T,long[];void;"),
      Triple(Kind.METHOD, "(TT;[F)V", ";T,float[];void;"),
      Triple(Kind.METHOD, "(TT;[D)V", ";T,double[];void;"),
      Triple(Kind.METHOD, "(TT;[Ljava/lang/Runnable;)V", ";T,java.lang.Runnable[];void;"),
      Triple(Kind.METHOD, "([TT;)V", ";T[];void;"),
      Triple(Kind.METHOD, "<T::Ljava/lang/Runnable;>([TT;)V", "T extends java.lang.Runnable;T[];void;"),
      Triple(Kind.METHOD, "(Ljava/util/Map<**>;)V", ";java.util.Map<?,?>;void;"),
      Triple(Kind.METHOD, "(TT;)V", ";T;void;"),
      Triple(Kind.METHOD, "<E::Ljava/util/Set<+TT;>;>(TE;TE;)V", "E extends java.util.Set<? extends T>;E,E;void;"),
      Triple(Kind.METHOD, "<E:Ljava/lang/ref/ReferenceQueue<-TT;>;:Ljava/util/Map<-TT;+TT;>;>(TE;TE;)V", "E extends java.lang.ref.ReferenceQueue<? super T>&java.util.Map<? super T,? extends T>;E,E;void;"),
      Triple(Kind.METHOD, "(Ljava/util/List<+TT;>;)V", ";java.util.List<? extends T>;void;"),
      Triple(Kind.METHOD, "(Ljava/util/Set<-TT;>;)V", ";java.util.Set<? super T>;void;"),
      Triple(Kind.METHOD, "<E::Ljava/lang/Runnable;>(TE;)V", "E extends java.lang.Runnable;E;void;"),
      Triple(Kind.METHOD, "<E:TT;>(TT;TE;)V", "E extends T;T,E;void;"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/langtools/tools/javac/classfiles/attributes/Signature/EnumTest.java
      Triple(Kind.CLASS, "Ljava/lang/Enum<LEnumTest;>;", ";java.lang.Enum<EnumTest>;"),
      Triple(Kind.METHOD, "()V", ";;void;"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/langtools/tools/javac/classfiles/attributes/Signature/ExceptionTest.java
      Triple(Kind.CLASS, "<Exc:Ljava/lang/RuntimeException;:Ljava/lang/Runnable;>Ljava/lang/Object;", "Exc extends java.lang.RuntimeException&java.lang.Runnable;java.lang.Object;"),
      Triple(Kind.METHOD, "<E:Ljava/lang/Exception;>()V^TE;", "E extends java.lang.Exception;;void;E"),
      Triple(Kind.METHOD, "<E:Ljava/lang/Exception;>(I)V^Ljava/io/IOException;^TE;^Ljava/io/IOError;", "E extends java.lang.Exception;int;void;java.io.IOException,E,java.io.IOError"),
      Triple(Kind.METHOD, "(J)V^TExc;", ";long;void;Exc"),
      Triple(Kind.METHOD, "(B)V^Ljava/io/IOError;^TExc;^Ljava/io/IOException;", ";byte;void;java.io.IOError,Exc,java.io.IOException"),
      Triple(Kind.METHOD, "(TExc;)V", ";Exc;void;"),
      Triple(Kind.METHOD, "(I)V^TExc;", ";int;void;Exc"),
      Triple(Kind.METHOD, "(J)V^TExc;^Ljava/io/IOException;", ";long;void;Exc,java.io.IOException"),
      Triple(Kind.METHOD, "(TExc;)V", ";Exc;void;"),
      Triple(Kind.METHOD, "<E:Ljava/lang/Exception;:Ljava/lang/Runnable;>(I)V^TE;", "E extends java.lang.Exception&java.lang.Runnable;int;void;E"),
      Triple(Kind.METHOD, "<E:Ljava/lang/Exception;>(J)V^Ljava/io/IOError;^TE;^Ljava/io/IOException;", "E extends java.lang.Exception;long;void;java.io.IOError,E,java.io.IOException"),
      Triple(Kind.METHOD, "<E:Ljava/lang/Exception;>(TE;)V", "E extends java.lang.Exception;E;void;"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/langtools/tools/javac/classfiles/attributes/Signature/FieldTest.java
      Triple(Kind.CLASS, "<T:Ljava/lang/Object;>Ljava/lang/Object;", "T extends java.lang.Object;java.lang.Object;"),
      Triple(Kind.TYPE, "Ljava/util/List<TT;>;", "java.util.List<T>"),
      Triple(Kind.TYPE, "Ljava/util/List<Ljava/util/Map<+TT;-TT;>;>;", "java.util.List<java.util.Map<? extends T,? super T>>"),
      Triple(Kind.TYPE, "TT;", "T"),
      Triple(Kind.TYPE, "[TT;", "T[]"),
      Triple(Kind.TYPE, "Ljava/util/List<[B>;", "java.util.List<byte[]>"),
      Triple(Kind.TYPE, "Ljava/util/List<[S>;", "java.util.List<short[]>"),
      Triple(Kind.TYPE, "Ljava/util/List<[I>;", "java.util.List<int[]>"),
      Triple(Kind.TYPE, "Ljava/util/List<[J>;", "java.util.List<long[]>"),
      Triple(Kind.TYPE, "Ljava/util/List<[C>;", "java.util.List<char[]>"),
      Triple(Kind.TYPE, "Ljava/util/List<[Z>;", "java.util.List<boolean[]>"),
      Triple(Kind.TYPE, "Ljava/util/List<[F>;", "java.util.List<float[]>"),
      Triple(Kind.TYPE, "Ljava/util/List<[D>;", "java.util.List<double[]>"),
      Triple(Kind.TYPE, "Ljava/util/List<Ljava/lang/Integer;>;", "java.util.List<java.lang.Integer>"),
      Triple(Kind.TYPE, "[[TT;", "T[][]"),
      Triple(Kind.TYPE, "[Ljava/util/List<TT;>;", "java.util.List<T>[]"),
      Triple(Kind.TYPE, "Ljava/util/List<+TT;>;", "java.util.List<? extends T>"),
      Triple(Kind.TYPE, "Ljava/util/Comparator<-TT;>;", "java.util.Comparator<? super T>"),
      Triple(Kind.TYPE, "Ljava/util/List<+Ljava/util/Comparator<-TT;>;>;", "java.util.List<? extends java.util.Comparator<? super T>>"),
      Triple(Kind.TYPE, "Ljava/util/Comparator<*>;", "java.util.Comparator<?>"),
      Triple(Kind.TYPE, "Ljava/util/Map<+[Z-[Z>;", "java.util.Map<? extends boolean[],? super boolean[]>"),
      Triple(Kind.TYPE, "Ljava/util/Map<+[B-[B>;", "java.util.Map<? extends byte[],? super byte[]>"),
      Triple(Kind.TYPE, "Ljava/util/Map<+[S-[S>;", "java.util.Map<? extends short[],? super short[]>"),
      Triple(Kind.TYPE, "Ljava/util/Map<+[I-[I>;", "java.util.Map<? extends int[],? super int[]>"),
      Triple(Kind.TYPE, "Ljava/util/Map<+[J-[J>;", "java.util.Map<? extends long[],? super long[]>"),
      Triple(Kind.TYPE, "Ljava/util/Map<+[C-[C>;", "java.util.Map<? extends char[],? super char[]>"),
      Triple(Kind.TYPE, "Ljava/util/Map<+[F-[F>;", "java.util.Map<? extends float[],? super float[]>"),
      Triple(Kind.TYPE, "Ljava/util/Map<+[D-[D>;", "java.util.Map<? extends double[],? super double[]>"),
      Triple(Kind.TYPE, "Ljava/util/Map<+[Ljava/lang/Object;-[Ljava/lang/Object;>;", "java.util.Map<? extends java.lang.Object[],? super java.lang.Object[]>"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/langtools/tools/javac/classfiles/attributes/Signature/InnerClassTest.java
      Triple(Kind.CLASS, "<T:Ljava/util/ArrayList<TT;>;:Ljava/lang/Runnable;>Ljava/lang/Object;", "T extends java.util.ArrayList<T>&java.lang.Runnable;java.lang.Object;"),
      Triple(Kind.CLASS, "LInnerClassTest\$1Local1;", ";InnerClassTest\$1Local1;"),
      Triple(Kind.CLASS, "LInnerClassTest\$1Local2<Ljava/util/ArrayList<TT;>;Ljava/util/Map<Ljava/util/ArrayList<TT;>;Ljava/util/ArrayList<TT;>;>;>;", ";InnerClassTest\$1Local2<java.util.ArrayList<T>,java.util.Map<java.util.ArrayList<T>,java.util.ArrayList<T>>>;"),
      Triple(Kind.TYPE, "TT;", "T"),
      Triple(Kind.TYPE, "[TT;", "T[]"),
      Triple(Kind.CLASS, "<T:Ljava/lang/Object;U::Ljava/util/Map<+TT;-TT;>;>Ljava/lang/Object;", "T extends java.lang.Object,U extends java.util.Map<? extends T,? super T>;java.lang.Object;"),
      Triple(Kind.METHOD, "(TT;TU;)V", ";T,U;void;"),
      Triple(Kind.METHOD, "([TT;)[TU;", ";T[];U[];"),
      Triple(Kind.CLASS, "LInnerClassTest\$1Local2<Ljava/util/ArrayList<TT;>;Ljava/util/Map<Ljava/util/ArrayList<TT;>;Ljava/util/ArrayList<TT;>;>;>;", ";InnerClassTest\$1Local2<java.util.ArrayList<T>,java.util.Map<java.util.ArrayList<T>,java.util.ArrayList<T>>>;"),
      Triple(Kind.TYPE, "TT;", "T"),
      Triple(Kind.TYPE, "[TT;", "T[]"),
      Triple(Kind.CLASS, "<E:TT;U::Ljava/util/Set<-TE;>;>Ljava/lang/Object;", "E extends T,U extends java.util.Set<? super E>;java.lang.Object;"),
      Triple(Kind.TYPE, "[TT;", "T[]"),
      Triple(Kind.TYPE, "Ljava/util/List<+TT;>;", "java.util.List<? extends T>"),
      Triple(Kind.TYPE, "Ljava/util/List<-TU;>;", "java.util.List<? super U>"),
      Triple(Kind.TYPE, "Ljava/util/List<*>;", "java.util.List<?>"),
      Triple(Kind.TYPE, "Ljava/util/List<Ljava/lang/Integer;>;", "java.util.List<java.lang.Integer>"),
      Triple(Kind.TYPE, "Ljava/util/List<TE;>;", "java.util.List<E>"),
      Triple(Kind.METHOD, "(TT;)V", ";T;void;"),
      Triple(Kind.METHOD, "(TT;TE;)V", ";T,E;void;"),
      Triple(Kind.METHOD, "(TT;)TE;", ";T;E;"),
      Triple(Kind.CLASS, "<T:Ljava/lang/Object;>Ljava/lang/Object;", "T extends java.lang.Object;java.lang.Object;"),
      Triple(Kind.METHOD, "(TT;)TT;", ";T;T;"),
      Triple(Kind.TYPE, "Ljava/util/List<+Ljava/lang/Number;>;", "java.util.List<? extends java.lang.Number>"),
      Triple(Kind.TYPE, "Ljava/util/List<-Ljava/lang/Number;>;", "java.util.List<? super java.lang.Number>"),
      Triple(Kind.TYPE, "Ljava/util/List<*>;", "java.util.List<?>"),
      Triple(Kind.TYPE, "Ljava/util/List<Ljava/lang/Integer;>;", "java.util.List<java.lang.Integer>"),
      Triple(Kind.METHOD, "(Ljava/util/List<-TT;>;)Ljava/util/List<+TT;>;", ";java.util.List<? super T>;java.util.List<? extends T>;"),
      Triple(Kind.METHOD, "(Ljava/util/List<+TT;>;)Ljava/util/List<-TT;>;", ";java.util.List<? extends T>;java.util.List<? super T>;"),
      Triple(Kind.METHOD, "(Ljava/util/Map<**>;)Ljava/util/Map<**>;", ";java.util.Map<?,?>;java.util.Map<?,?>;"),
      Triple(Kind.METHOD, "(Ljava/util/List<+TT;>;Ljava/util/List<-TT;>;Ljava/util/Map<**>;)Ljava/util/List<*>;", ";java.util.List<? extends T>,java.util.List<? super T>,java.util.Map<?,?>;java.util.List<?>;"),
      Triple(Kind.METHOD, "<T::Ljava/lang/Runnable;>(Ljava/util/List<+TT;>;Ljava/util/List<-TT;>;Ljava/util/Map<**>;)Ljava/util/List<*>;", "T extends java.lang.Runnable;java.util.List<? extends T>,java.util.List<? super T>,java.util.Map<?,?>;java.util.List<?>;"),
      Triple(Kind.CLASS, "LInnerClassTest<TT;>.InnerClass1<TT;Ljava/util/Set<TT;>;>;LInnerClassTest\$InnerInterface<TT;>;", ";InnerClassTest<T>.InnerClass1<T,java.util.Set<T>>;InnerClassTest\$InnerInterface<T>"),
      Triple(Kind.METHOD, "(TT;)V", ";T;void;"),
      Triple(Kind.METHOD, "(TT;TT;)V", ";T,T;void;"),
      Triple(Kind.METHOD, "(TT;)TT;", ";T;T;"),
      Triple(Kind.METHOD, "(Ljava/util/List<-TT;>;)Ljava/util/List<+TT;>;", ";java.util.List<? super T>;java.util.List<? extends T>;"),
      Triple(Kind.METHOD, "(Ljava/util/List<+TT;>;)Ljava/util/List<-TT;>;", ";java.util.List<? extends T>;java.util.List<? super T>;"),
      Triple(Kind.METHOD, "(Ljava/util/Map<**>;)Ljava/util/Map<**>;", ";java.util.Map<?,?>;java.util.Map<?,?>;"),
      Triple(Kind.CLASS, "<T:Ljava/lang/String;E::Ljava/util/Set<TT;>;>Ljava/lang/Object;LInnerClassTest\$InnerInterface<TE;>;", "T extends java.lang.String,E extends java.util.Set<T>;java.lang.Object;InnerClassTest\$InnerInterface<E>"),
      Triple(Kind.METHOD, "<E::Ljava/lang/Runnable;>(TE;)V", "E extends java.lang.Runnable;E;void;"),
      Triple(Kind.METHOD, "(TT;)V", ";T;void;"),
      Triple(Kind.METHOD, "(TT;TE;)V", ";T,E;void;"),
      Triple(Kind.TYPE, "Ljava/util/List<+Ljava/lang/Number;>;", "java.util.List<? extends java.lang.Number>"),
      Triple(Kind.TYPE, "Ljava/util/List<-Ljava/lang/Number;>;", "java.util.List<? super java.lang.Number>"),
      Triple(Kind.TYPE, "Ljava/util/List<*>;", "java.util.List<?>"),
      Triple(Kind.TYPE, "Ljava/util/List<Ljava/lang/Integer;>;", "java.util.List<java.lang.Integer>"),
      Triple(Kind.METHOD, "(TE;)TE;", ";E;E;"),
      Triple(Kind.METHOD, "(Ljava/util/List<-TE;>;)Ljava/util/List<+TE;>;", ";java.util.List<? super E>;java.util.List<? extends E>;"),
      Triple(Kind.METHOD, "(Ljava/util/List<+TE;>;)Ljava/util/List<-TE;>;", ";java.util.List<? extends E>;java.util.List<? super E>;"),
      Triple(Kind.METHOD, "(Ljava/util/Map<**>;)Ljava/util/Map<**>;", ";java.util.Map<?,?>;java.util.Map<?,?>;"),
      Triple(Kind.METHOD, "<E:Ljava/lang/Object;>(TE;)TE;", "E extends java.lang.Object;E;E;"),
      Triple(Kind.METHOD, "<E:Ljava/lang/Object;>(Ljava/util/List<-TE;>;)Ljava/util/List<+TE;>;", "E extends java.lang.Object;java.util.List<? super E>;java.util.List<? extends E>;"),
      Triple(Kind.METHOD, "<E:Ljava/lang/Object;>(Ljava/util/List<+TE;>;)Ljava/util/List<-TE;>;", "E extends java.lang.Object;java.util.List<? extends E>;java.util.List<? super E>;"),
      Triple(Kind.METHOD, "<E:Ljava/lang/Object;>(Ljava/util/Map<**>;)Ljava/util/Map<**>;", "E extends java.lang.Object;java.util.Map<?,?>;java.util.Map<?,?>;"),
      Triple(Kind.CLASS, "Ljava/lang/Object;LInnerClassTest\$ExceptionHolder<Ljava/lang/RuntimeException;>;Ljava/util/concurrent/Callable<Ljava/util/Map<**>;>;", ";java.lang.Object;InnerClassTest\$ExceptionHolder<java.lang.RuntimeException>,java.util.concurrent.Callable<java.util.Map<?,?>>"),
      Triple(Kind.METHOD, "()Ljava/util/Map<**>;", ";;java.util.Map<?,?>;"),
      Triple(Kind.CLASS, "<E:Ljava/lang/Exception;>Ljava/lang/Object;", "E extends java.lang.Exception;java.lang.Object;"),
      Triple(Kind.METHOD, "()V^TE;", ";;void;E"),
      Triple(Kind.METHOD, "()TE;", ";;E;"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/langtools/tools/javac/classfiles/attributes/Signature/MethodParameterTest.java
      Triple(Kind.CLASS, "<T:Ljava/lang/Object;>Ljava/lang/Object;", "T extends java.lang.Object;java.lang.Object;"),
      Triple(Kind.METHOD, "<E:TT;U::Ljava/util/List<TE;>;:Ljava/lang/Runnable;>(TT;Ljava/util/Set<-TE;>;Ljava/util/ArrayList<+Ljava/util/Set<TU;>;>;)V", "E extends T,U extends java.util.List<E>&java.lang.Runnable;T,java.util.Set<? super E>,java.util.ArrayList<? extends java.util.Set<U>>;void;"),
      Triple(Kind.METHOD, "<E:TT;U::Ljava/util/List<TE;>;:Ljava/lang/Runnable;>(TT;TU;Ljava/util/ArrayList<+Ljava/util/Set<TU;>;>;)V", "E extends T,U extends java.util.List<E>&java.lang.Runnable;T,U,java.util.ArrayList<? extends java.util.Set<U>>;void;"),
      Triple(Kind.METHOD, "<T::Ljava/util/List<*>;E::Ljava/util/Set<-TT;>;>(TE;[TT;Ljava/util/Map<*+TE;>;)TE;", "T extends java.util.List<?>,E extends java.util.Set<? super T>;E,T[],java.util.Map<?,? extends E>;E;"),
      Triple(Kind.METHOD, "(TT;[Z)V", ";T,boolean[];void;"),
      Triple(Kind.METHOD, "(TT;[C)V", ";T,char[];void;"),
      Triple(Kind.METHOD, "(TT;[B)V", ";T,byte[];void;"),
      Triple(Kind.METHOD, "(TT;[S)V", ";T,short[];void;"),
      Triple(Kind.METHOD, "(TT;[I)V", ";T,int[];void;"),
      Triple(Kind.METHOD, "(TT;[J)V", ";T,long[];void;"),
      Triple(Kind.METHOD, "(TT;[F)V", ";T,float[];void;"),
      Triple(Kind.METHOD, "(TT;[D)V", ";T,double[];void;"),
      Triple(Kind.METHOD, "(TT;[Ljava/lang/Object;)V", ";T,java.lang.Object[];void;"),
      Triple(Kind.METHOD, "([TT;)V", ";T[];void;"),
      Triple(Kind.METHOD, "(TT;[Z)V", ";T,boolean[];void;"),
      Triple(Kind.METHOD, "(TT;[C)V", ";T,char[];void;"),
      Triple(Kind.METHOD, "(TT;[B)V", ";T,byte[];void;"),
      Triple(Kind.METHOD, "(TT;[S)V", ";T,short[];void;"),
      Triple(Kind.METHOD, "(TT;[I)V", ";T,int[];void;"),
      Triple(Kind.METHOD, "(TT;[J)V", ";T,long[];void;"),
      Triple(Kind.METHOD, "(TT;[F)V", ";T,float[];void;"),
      Triple(Kind.METHOD, "(TT;[D)V", ";T,double[];void;"),
      Triple(Kind.METHOD, "(TT;[Ljava/lang/Object;)V", ";T,java.lang.Object[];void;"),
      Triple(Kind.METHOD, "([TT;)V", ";T[];void;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;[Z)V", "T extends java.lang.Object;T,boolean[];void;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;[C)V", "T extends java.lang.Object;T,char[];void;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;[B)V", "T extends java.lang.Object;T,byte[];void;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;[S)V", "T extends java.lang.Object;T,short[];void;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;[I)V", "T extends java.lang.Object;T,int[];void;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;[J)V", "T extends java.lang.Object;T,long[];void;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;[F)V", "T extends java.lang.Object;T,float[];void;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;[D)V", "T extends java.lang.Object;T,double[];void;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;[Ljava/lang/Object;)V", "T extends java.lang.Object;T,java.lang.Object[];void;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>([TT;)V", "T extends java.lang.Object;T[];void;"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/langtools/tools/javac/classfiles/attributes/Signature/MethodTypeBoundTest.java
      Triple(Kind.CLASS, "<T:Ljava/lang/Object;>Ljava/lang/Object;", "T extends java.lang.Object;java.lang.Object;"),
      Triple(Kind.METHOD, "<E:Ljava/lang/String;:Ljava/lang/Runnable;:Ljava/util/Collection<+TT;>;>(TE;)TE;", "E extends java.lang.String&java.lang.Runnable&java.util.Collection<? extends T>;E;E;"),
      Triple(Kind.METHOD, "<E::Ljava/lang/Runnable;:Ljava/util/Collection<-TT;>;>(TE;)TE;", "E extends java.lang.Runnable&java.util.Collection<? super T>;E;E;"),
      Triple(Kind.METHOD, "<E:Ljava/util/ArrayList<+TT;>;>(TE;)TE;", "E extends java.util.ArrayList<? extends T>;E;E;"),
      Triple(Kind.METHOD, "<E:Ljava/util/LinkedList<TE;>;:Ljava/util/List<TE;>;>(TE;)TE;", "E extends java.util.LinkedList<E>&java.util.List<E>;E;E;"),
      Triple(Kind.METHOD, "<E:Ljava/util/LinkedList<TE;>;:Ljava/util/List<TE;>;U::Ljava/util/Iterator<-LMethodTypeBoundTest<TT;>.InnerClass<TE;>;>;>(TU;)TE;", "E extends java.util.LinkedList<E>&java.util.List<E>,U extends java.util.Iterator<? super MethodTypeBoundTest<T>.InnerClass<E>>;U;E;"),
      Triple(Kind.METHOD, "<E:Ljava/util/LinkedList<TT;>;U:TE;>()V", "E extends java.util.LinkedList<T>,U extends E;;void;"),
      Triple(Kind.CLASS, "<T:Ljava/lang/Object;>Ljava/lang/Object;", "T extends java.lang.Object;java.lang.Object;"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/langtools/tools/javac/classfiles/attributes/Signature/ReturnTypeTest.java
      Triple(Kind.CLASS, "<T:Ljava/awt/Frame;:Ljava/lang/Runnable;:Ljava/util/concurrent/Callable<[TT;>;>Ljava/lang/Object;", "T extends java.awt.Frame&java.lang.Runnable&java.util.concurrent.Callable<T[]>;java.lang.Object;"),
      Triple(Kind.METHOD, "(TT;)[B", ";T;byte[];"),
      Triple(Kind.METHOD, "(TT;)[S", ";T;short[];"),
      Triple(Kind.METHOD, "(TT;)[C", ";T;char[];"),
      Triple(Kind.METHOD, "(TT;)[I", ";T;int[];"),
      Triple(Kind.METHOD, "(TT;)[J", ";T;long[];"),
      Triple(Kind.METHOD, "(TT;)[Z", ";T;boolean[];"),
      Triple(Kind.METHOD, "(TT;)[F", ";T;float[];"),
      Triple(Kind.METHOD, "(TT;)[D", ";T;double[];"),
      Triple(Kind.METHOD, "(TT;)[Ljava/lang/Object;", ";T;java.lang.Object[];"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)[B", "T extends java.lang.Object;T;byte[];"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)[S", "T extends java.lang.Object;T;short[];"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)[C", "T extends java.lang.Object;T;char[];"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)[I", "T extends java.lang.Object;T;int[];"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)[J", "T extends java.lang.Object;T;long[];"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)[Z", "T extends java.lang.Object;T;boolean[];"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)[F", "T extends java.lang.Object;T;float[];"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)[D", "T extends java.lang.Object;T;double[];"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)[Ljava/lang/Object;", "T extends java.lang.Object;T;java.lang.Object[];"),
      Triple(Kind.METHOD, "()TT;", ";;T;"),
      Triple(Kind.METHOD, "()[TT;", ";;T[];"),
      Triple(Kind.METHOD, "<E:TT;>()TE;", "E extends T;;E;"),
      Triple(Kind.METHOD, "<E:TT;>()[TE;", "E extends T;;E[];"),
      Triple(Kind.METHOD, "()Ljava/util/List<TT;>;", ";;java.util.List<T>;"),
      Triple(Kind.METHOD, "()[Ljava/util/List<TT;>;", ";;java.util.List<T>[];"),
      Triple(Kind.METHOD, "()Ljava/util/List<+TT;>;", ";;java.util.List<? extends T>;"),
      Triple(Kind.METHOD, "()[Ljava/util/List<+TT;>;", ";;java.util.List<? extends T>[];"),
      Triple(Kind.METHOD, "()Ljava/util/List<-TT;>;", ";;java.util.List<? super T>;"),
      Triple(Kind.METHOD, "()[Ljava/util/List<-TT;>;", ";;java.util.List<? super T>[];"),
      Triple(Kind.METHOD, "()Ljava/util/Map<**>;", ";;java.util.Map<?,?>;"),
      Triple(Kind.METHOD, "()[Ljava/util/Map<**>;", ";;java.util.Map<?,?>[];"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>()TT;", "T extends java.lang.Object;;T;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>()[TT;", "T extends java.lang.Object;;T[];"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;E:TT;>()TE;", "T extends java.lang.Object,E extends T;;E;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;E:TT;>()[TE;", "T extends java.lang.Object,E extends T;;E[];"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>()Ljava/util/List<TT;>;", "T extends java.lang.Object;;java.util.List<T>;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>()[Ljava/util/List<TT;>;", "T extends java.lang.Object;;java.util.List<T>[];"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>()Ljava/util/List<+TT;>;", "T extends java.lang.Object;;java.util.List<? extends T>;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>()[Ljava/util/List<+TT;>;", "T extends java.lang.Object;;java.util.List<? extends T>[];"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>()Ljava/util/List<-TT;>;", "T extends java.lang.Object;;java.util.List<? super T>;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>()[Ljava/util/List<-TT;>;", "T extends java.lang.Object;;java.util.List<? super T>[];"),
      Triple(Kind.METHOD, "()Ljava/util/Map<**>;", ";;java.util.Map<?,?>;"),
      Triple(Kind.METHOD, "()[Ljava/util/Map<**>;", ";;java.util.Map<?,?>[];"),
      Triple(Kind.METHOD, "()Ljava/util/Map<+[Z-[Z>;", ";;java.util.Map<? extends boolean[],? super boolean[]>;"),
      Triple(Kind.METHOD, "()Ljava/util/Map<+[B-[B>;", ";;java.util.Map<? extends byte[],? super byte[]>;"),
      Triple(Kind.METHOD, "()Ljava/util/Map<+[S-[S>;", ";;java.util.Map<? extends short[],? super short[]>;"),
      Triple(Kind.METHOD, "()Ljava/util/Map<+[I-[I>;", ";;java.util.Map<? extends int[],? super int[]>;"),
      Triple(Kind.METHOD, "()Ljava/util/Map<+[J-[J>;", ";;java.util.Map<? extends long[],? super long[]>;"),
      Triple(Kind.METHOD, "()Ljava/util/Map<+[C-[C>;", ";;java.util.Map<? extends char[],? super char[]>;"),
      Triple(Kind.METHOD, "()Ljava/util/Map<+[F-[F>;", ";;java.util.Map<? extends float[],? super float[]>;"),
      Triple(Kind.METHOD, "()Ljava/util/Map<+[D-[D>;", ";;java.util.Map<? extends double[],? super double[]>;"),
      Triple(Kind.METHOD, "()Ljava/util/Map<+[Ljava/lang/Object;-[Ljava/lang/Object;>;", ";;java.util.Map<? extends java.lang.Object[],? super java.lang.Object[]>;"),
      Triple(Kind.METHOD, "(TT;)V", ";T;void;"),
      Triple(Kind.METHOD, "(TT;)B", ";T;byte;"),
      Triple(Kind.METHOD, "(TT;)S", ";T;short;"),
      Triple(Kind.METHOD, "(TT;)C", ";T;char;"),
      Triple(Kind.METHOD, "(TT;)I", ";T;int;"),
      Triple(Kind.METHOD, "(TT;)J", ";T;long;"),
      Triple(Kind.METHOD, "(TT;)Z", ";T;boolean;"),
      Triple(Kind.METHOD, "(TT;)F", ";T;float;"),
      Triple(Kind.METHOD, "(TT;)D", ";T;double;"),
      Triple(Kind.METHOD, "(TT;)Ljava/lang/Object;", ";T;java.lang.Object;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)V", "T extends java.lang.Object;T;void;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)B", "T extends java.lang.Object;T;byte;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)S", "T extends java.lang.Object;T;short;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)C", "T extends java.lang.Object;T;char;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)I", "T extends java.lang.Object;T;int;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)J", "T extends java.lang.Object;T;long;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)Z", "T extends java.lang.Object;T;boolean;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)F", "T extends java.lang.Object;T;float;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)D", "T extends java.lang.Object;T;double;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)Ljava/lang/Object;", "T extends java.lang.Object;T;java.lang.Object;"),

      // From https://github.com/openjdk/jdk/blob/jdk-23%2B23/test/langtools/tools/javap/classfile/6888367/T6888367.java
      Triple(Kind.TYPE, "LGenClss<LClss;>;", "GenClss<Clss>"),
      Triple(Kind.METHOD, "()LGenClss<LClss;>;", ";;GenClss<Clss>;"),
      Triple(Kind.METHOD, "()LGenClss<*>;", ";;GenClss<?>;"),
      Triple(Kind.METHOD, "()LGenClss<+LClss;>;", ";;GenClss<? extends Clss>;"),
      Triple(Kind.METHOD, "()LGenClss<-LClss;>;", ";;GenClss<? super Clss>;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>()TT;", "T extends java.lang.Object;;T;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>()LGenClss<+TT;>;", "T extends java.lang.Object;;GenClss<? extends T>;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>()LGenClss<-TT;>;", "T extends java.lang.Object;;GenClss<? super T>;"),
      Triple(Kind.METHOD, "(LGenClss<LClss;>;)V", ";GenClss<Clss>;void;"),
      Triple(Kind.METHOD, "(LGenClss<*>;)V", ";GenClss<?>;void;"),
      Triple(Kind.METHOD, "(LGenClss<+LClss;>;)V", ";GenClss<? extends Clss>;void;"),
      Triple(Kind.METHOD, "(LGenClss<-LClss;>;)V", ";GenClss<? super Clss>;void;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(TT;)V", "T extends java.lang.Object;T;void;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(LGenClss<+TT;>;)V", "T extends java.lang.Object;GenClss<? extends T>;void;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Object;>(LGenClss<-TT;>;)V", "T extends java.lang.Object;GenClss<? super T>;void;"),
      Triple(Kind.METHOD, "<T:Ljava/lang/Throwable;>()V^TT;", "T extends java.lang.Throwable;;void;T"),
      Triple(Kind.CLASS, "<TQ:Ljava/lang/Object;>LTest\$X\$P;", "TQ extends java.lang.Object;Test\$X\$P;"),
      Triple(Kind.CLASS, "<TR:Ljava/lang/Object;>LTest\$X\$Q<TTR;>;", "TR extends java.lang.Object;Test\$X\$Q<TR>;"),
      Triple(Kind.CLASS, "<TY:Ljava/lang/Object;>Ljava/lang/Object;", "TY extends java.lang.Object;java.lang.Object;"),
      Triple(Kind.CLASS, "<TQ:Ljava/lang/Object;>LTest\$Y<TTY;>.P;", "TQ extends java.lang.Object;Test\$Y<TY>.P;"),
      Triple(Kind.CLASS, "<TR:Ljava/lang/Object;>LTest\$Y<TTY;>.Q<TTR;>;", "TR extends java.lang.Object;Test\$Y<TY>.Q<TR>;"),
      Triple(Kind.CLASS, "<TR2:Ljava/lang/Object;>LTest\$Y<TTY;>.R<TTR;>.R1;", "TR2 extends java.lang.Object;Test\$Y<TY>.R<TR>.R1;"),
      Triple(Kind.TYPE, "LTest\$Y<TTY;>.Q<TTY;>;", "Test\$Y<TY>.Q<TY>"),
      Triple(Kind.CLASS, "<TS2:Ljava/lang/Object;>LTest\$Y<TTY;>.S.S1;", "TS2 extends java.lang.Object;Test\$Y<TY>.S.S1;"),
      Triple(Kind.TYPE, "LTest\$Y<TTY;>.S.S2<TTY;>;", "Test\$Y<TY>.S.S2<TY>"),
    )

  fun <Kind> test(type: String, test: Triple<Kind, String, String?>, parse: (Kind, String) -> String) {
    val (kind, signature, expectedResult) = test
    if (expectedResult == "") { // Don't run test; just print actual result
      val actualResult = parse(kind, signature)
      log.error { "$type: $signature type: ${actualResult}" }
    } else if (expectedResult == null) { // Expect an error
      // NOTE: Printing the actual result if it doesn't fail to help with debugging the tests
      assertFailsWith<IllegalArgumentException> {
        val actualResult = parse(kind, signature)
        log.error { "$type: $signature type: ${actualResult}" }
      }
    } else {
      expect(expectedResult) { parse(kind, signature) }
    }
  }

  // TODO: ktlint: <T: Type>
  fun <T : Type> resultsToString(r: List<T>): String = r.joinToString(",") { it.asString() }

  fun parseSignature(kind: Kind, signature: String): String =
    when (kind) {
      Kind.TYPE -> Signature.typeSignature(signature).asString()
      Kind.CLASS -> {
        val s = Signature.classSignature(signature)
        listOf(
          resultsToString(s.typeParameters),
          s.superclass.asString(),
          resultsToString(s.interfaces),
        ).joinToString(";")
      }
      Kind.METHOD -> {
        val s = Signature.methodSignature(signature) // TODO: destruct
        listOf(
          resultsToString(s.typeParameters),
          resultsToString(s.parameterTypes),
          s.returnType.asString(),
          resultsToString(s.exceptionTypes),
        ).joinToString(";")
      }
    }

  @ParameterizedTest @MethodSource("tests")
  fun `test signature`(test: Triple<Kind, String, String?>) = test("signature", test, ::parseSignature)

  @ParameterizedTest @MethodSource("tests")
  fun `test descriptor`(test: Triple<Kind, String, String?>) {
    // Modify the tests to (1) use DescriptorTest.Kind and (2) fail for valid signatures but invalid descriptors
    val modifiedTest = when (test.first) {
      Kind.CLASS -> return // No meaningful equivalent for descriptors
      Kind.TYPE -> Triple(
        DescriptorTest.Kind.FIELD,
        test.second,
        test.third.let { result ->
          if (result == null || hasDots(test.second) || hasTypeParam(Signature.typeSignature(test.second))) {
            null
          } else {
            result
          }
        },
      )
      Kind.METHOD -> Triple(
        DescriptorTest.Kind.METHOD,
        test.second,
        test.third.let { result ->
          if (result == null ||
            hasDots(test.second) ||
            Signature.methodSignature(test.second).let { signature ->
              signature.typeParameters.isNotEmpty() ||
                signature.exceptionTypes.isNotEmpty() ||
                signature.parameterTypes.any(::hasTypeParam) ||
                hasTypeParam(signature.returnType)
            }
          ) {
            null
          } else {
            result.split(';').let { es -> "${es[1]};${es[2]}" } // Omit type parameters and exceptions
          }
        },
      )
    }
    test("descriptor", modifiedTest, DescriptorTest::parseDescriptor)
  }

  // TODO: "." is valid (for inner classes) in signatures but not descriptors
  private fun hasDots(s: String): Boolean = s.any { listOf('.').contains(it) }

  // TODO: Type parameters are valid in signatures but not descriptors
  private fun hasTypeParam(type: Type): Boolean =
    null != type.accept(
      object : GenericVisitorAdapter<Unit, Unit>() {
        override fun visit(n: ClassOrInterfaceType, a: Unit): Unit? =
          if (n.typeArguments.isPresent) Unit else super.visit(n, a)

        override fun visit(n: TypeParameter, a: Unit): Unit? = Unit
      },
      Unit,
    )
}
